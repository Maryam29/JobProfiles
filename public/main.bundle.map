{"version":3,"sources":["webpack:///./src/app/home/custom-list.service.ts","webpack:///./src/$_gendir async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth-guard.service.ts","webpack:///./src/app/home/Keys.pipe.ts","webpack:///./src/app/home/Times.pipe.ts","webpack:///./src/app/home/applicant-form/applicant-form.component.ts","webpack:///./src/app/home/applicant-list/applicant-list.component.ts","webpack:///./src/app/home/applicant-profile/applicant-profile.component.ts","webpack:///./src/app/home/create-form/create-form.component.ts","webpack:///./src/app/home/create-template/create-template.component.ts","webpack:///./src/app/home/field.model.ts","webpack:///./src/app/home/form-control.model.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/preview-form/preview-form.component.ts","webpack:///./src/app/home/section.model.ts","webpack:///./src/app/home/view-forms/view-forms.component.ts","webpack:///./src/app/signin/signin.component.ts","webpack:///./src/app/signup/signup.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/home/custom-form.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/home/applicant-form/applicant-form.component.css","webpack:///./src/app/home/applicant-list/applicant-list.component.css","webpack:///./src/app/home/applicant-profile/applicant-profile.component.css","webpack:///./src/app/home/create-form/create-form.component.css","webpack:///./src/app/home/create-template/create-template.component.css","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/preview-form/preview-form.component.css","webpack:///./src/app/home/view-forms/view-forms.component.css","webpack:///./src/app/signin/signin.component.css","webpack:///./src/app/signup/signup.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/home/applicant-form/applicant-form.component.html","webpack:///./src/app/home/applicant-list/applicant-list.component.html","webpack:///./src/app/home/applicant-profile/applicant-profile.component.html","webpack:///./src/app/home/create-form/create-form.component.html","webpack:///./src/app/home/create-template/create-template.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/preview-form/preview-form.component.html","webpack:///./src/app/home/view-forms/view-forms.component.html","webpack:///./src/app/signin/signin.component.html","webpack:///./src/app/signup/signup.component.html","webpack:///./src/app/home/form.model.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CustomListService {\r\n    countries: any[] = new Array();\r\n    companytypes: any[] = new Array();\r\n    constructor() { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/custom-list.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 297;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_gendir async\n// module id = 297\n// module chunks = 1","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Job Portal';\n  IsAuthenticated = false;\n  constructor(private AuthService:  AuthService) {}\n\n  ngOnInit() {\n    // console.log(\"Nginit app compo\");\n    this.AuthService.isAuthenticated.subscribe((isauth) => {\n      // console.log(\"Set Is Authenticated\");\n      this.IsAuthenticated = isauth;\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FilterPipeModule } from 'ngx-filter-pipe';\n\nimport { AuthGuard } from './auth/auth-guard.service';\nimport { AuthService } from './auth/auth.service';\nimport { CustomFormService } from './home/custom-form.service';\nimport { CustomListService } from './home/custom-list.service';\n\nimport { AppComponent } from './app.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { HomeComponent } from './home/home.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { CreateFormComponent } from './home/create-form/create-form.component';\nimport { CreateTemplateComponent } from './home/create-template/create-template.component';\nimport { ApplicantFormComponent } from './home/applicant-form/applicant-form.component';\nimport { ViewFormsComponent } from './home/view-forms/view-forms.component';\nimport { ApplicantListComponent } from './home/applicant-list/applicant-list.component';\nimport { PreviewFormComponent } from './home/preview-form/preview-form.component';\nimport { ApplicantProfileComponent } from './home/applicant-profile/applicant-profile.component';\n\nimport { KeysPipe } from './home/Keys.pipe';\nimport { TimesPipe } from './home/Times.pipe';\n\nconst appRoutes: Routes = [\n  { path: 'signin', component: SigninComponent},\n  { path: 'signup', component: SignupComponent},\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuard], children: [\n    // { path: 'createform', component: CreateFormComponent, canActivate:[AuthGuard]},\n    { path: 'forms', component: ViewFormsComponent, canActivate: [AuthGuard]},\n    { path: 'applicants', component: ApplicantListComponent, canActivate: [AuthGuard]},\n    { path: 'profile', component: ApplicantFormComponent, canActivate: [AuthGuard]},\n    { path: 'ViewProfile/:id', component: ApplicantProfileComponent, canActivate: [AuthGuard]},\n    { path: 'templates', component: CreateTemplateComponent, canActivate: [AuthGuard]}\n]},\n  { path: '**', redirectTo: '/home', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SigninComponent,\n    HomeComponent,\n    SignupComponent,\n    CreateFormComponent,\n    ApplicantFormComponent,\n    ViewFormsComponent,\n    ApplicantListComponent,\n    PreviewFormComponent,\n    CreateTemplateComponent,\n    ApplicantProfileComponent,\n    KeysPipe,\n    TimesPipe\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    ReactiveFormsModule,\n    FilterPipeModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [AuthService, AuthGuard, CustomFormService, CustomListService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { CanActivate, CanLoad, ActivatedRouteSnapshot, RouterStateSnapshot, Router, Route, ActivatedRoute } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/observable';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanLoad {\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private authService: AuthService) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>|boolean {\r\n    // return true;\r\n    //  2.) If token is not set, which means a new tab is opened, then check the node server if session is still open. \r\n    // if open then take action similar to 1, ese redirect to sigin page\r\n    //     console.log(\"Check for session\");\r\n        return this.authService.isSessionOpen().take(1).map(obj => {\r\n            // console.log(obj);\r\n            if (obj === true) {\r\n                return obj;\r\n            } else {\r\n                this.router.navigate(['/signin']);\r\n                return obj;\r\n            }\r\n        }\r\n        );\r\n    }\r\n\r\n    canLoad(route: Route) {\r\n        return true;\r\n        // if(this.authService.isAuthenticated()){\r\n        //     return true;\r\n        // }\r\n        // else\r\n        // {\r\n        //     this.router.navigate(['/signin']);\r\n        // }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth-guard.service.ts","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe(\r\n    {name: 'keys'}\r\n)\r\nexport class KeysPipe implements PipeTransform {\r\n  transform(value): any {\r\n    const keys = [];\r\n    for(let key in value){\r\n        keys.push({key: key, value: value[key]});\r\n    }\r\n    return keys;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/Keys.pipe.ts","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe(\r\n    {name: 'times'}\r\n)\r\nexport class TimesPipe implements PipeTransform {\r\n  transform(value): any {\r\n    return (new Array(value)).fill(1);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/Times.pipe.ts","import { Component, OnInit } from '@angular/core';\r\nimport { CustomFormService } from '../custom-form.service';\r\nimport { CustomListService } from '../custom-list.service';\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { FormControl, FormGroup, Validators, FormArray, FormBuilder } from '@angular/forms';\r\nimport { concat } from 'rxjs/operator/concat';\r\nimport { SectionModel } from '../Section.model';\r\nimport { FormModel } from '../form.model';\r\n\r\n@Component({\r\n    selector: 'app-applicant-form',\r\n    templateUrl: './applicant-form.component.html',\r\n    styleUrls: ['./applicant-form.component.css']\r\n})\r\nexport class ApplicantFormComponent implements OnInit {\r\n    type: string;\r\n    isApplicationFilled: boolean;\r\n    fieldcount: number;\r\n    FormFields = new Array();\r\n    // Actual Form with Subsections also included.\r\n    // This Form is added as same section's different subsection can have different field options.\r\n    // True for cases like Country->State. With different country selected diff. states list in 2 sub-sections but same section\r\n    FormLayout;\r\n    ProfileForm: FormGroup; // Angular Reactive Form.\r\n    FormTitle: string;\r\n    sessionData;\r\n    ProfileDetails;   // This has filled Applicant Data fetched from DB.\r\n    ActualForm: FormModel; // Actual Form created by Admin for specific Aplicant Type.\r\n    isSelected: any[];\r\n    isFormSaved = 0;\r\n    // When Form is partially filled.0: form in no-edit state, 1: Changes Saved, -1: Changes not saved due to error,2:in edit/remove/add\r\n    constructor(private customFormService: CustomFormService, private authService: AuthService,\r\n        private fb: FormBuilder, private customListService: CustomListService) { }\r\n\r\n    ngOnInit() {\r\n        // console.log(this.authService.sessionData);\r\n        this.sessionData = this.authService.sessionData;\r\n        this.type = this.sessionData.type;\r\n        this.ProfileForm = this.fb.group({\r\n            customcontrols: new FormArray([])\r\n        });\r\n        this.GetApplicantProfile();\r\n        this.GetAllList();\r\n    }\r\n\r\n    GetApplicantProfile() {\r\n        this.customFormService.GetApplicantProfile(this.sessionData._id).subscribe((obj) => {\r\n            if (obj) {\r\n                this.isApplicationFilled = true;\r\n                this.ProfileDetails = obj;\r\n                this.CreateForm();\r\n            }else {\r\n                this.isApplicationFilled = false;\r\n                console.log(this.type);\r\n                this.CreateEmptyForm();\r\n            }\r\n        });\r\n    }\r\n\r\n    GetAllList() {\r\n        if (this.customListService.countries.length === 0) {\r\n            this.customFormService.getCountries().subscribe(obj => {\r\n                this.customListService.countries = obj;\r\n            });\r\n        }\r\n        if (this.customListService.companytypes.length === 0) {\r\n            this.customFormService.getCompanyTypes().subscribe(obj => {\r\n                this.customListService.companytypes = obj;\r\n            });\r\n        }\r\n    }\r\n\r\n    GetFieldValue(SectionIndex, subindex, FieldIndex) {\r\n        const FieldType = this.FormLayout.Sections[SectionIndex][subindex].Fields[FieldIndex].FieldType.toString();\r\n        const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n        const FormValues = FormAllSections.value;\r\n        let result = '';\r\n        if (FieldType === 'Checkbox') {\r\n            const checkboxarray = FormValues[SectionIndex][subindex][FieldIndex];\r\n            for (let i = 0; i < checkboxarray.length; i++) {\r\n                if (checkboxarray[i]) {\r\n                    result = result + this.FormLayout.Sections[SectionIndex][subindex].Fields[FieldIndex].options[i] + ' ';\r\n                }\r\n            }\r\n            return result;\r\n        }else {\r\n            return FormValues[SectionIndex][subindex][FieldIndex];\r\n        }\r\n    }\r\n\r\n    // ----------------For Checkbox---------------//\r\n    checkOptionInProfile(sectionid, subsectionindex, option, fieldid) {\r\n        if (this.ProfileDetails[sectionid][subsectionindex][fieldid] &&\r\n            this.ProfileDetails[sectionid][subsectionindex][fieldid].length > 0) {\r\n            return this.ProfileDetails[sectionid][subsectionindex][fieldid].includes(option);\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onSelectParent(sectionindex, subindex, fieldindex, value) {\r\n\r\n        const currFieldId = this.FormLayout.Sections[sectionindex][subindex].Fields[fieldindex].FieldID.toString();\r\n        const FieldType = this.FormLayout.Sections[sectionindex][subindex].Fields[fieldindex].FieldType.toString();\r\n        const currSectionId = this.FormLayout.Sections[sectionindex][subindex].SectionID.toString();\r\n        const ParentSectionId = this.FormLayout.Sections[sectionindex][subindex].Fields[fieldindex].ParentField.SectionID;\r\n        const ParentFieldId = this.FormLayout.Sections[sectionindex][subindex].Fields[fieldindex].ParentField.FieldID;\r\n        let suboptions;\r\n        let ParentValue;\r\n\r\n\r\n        const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n        const FormValues = FormAllSections.value;\r\n        // console.log(FormValues);\r\n\r\n        const ParentSectionIndex = this.ActualForm.Sections\r\n                                                    .findIndex(sec => sec.SectionID.toString() === ParentSectionId);\r\n\r\n        if (ParentSectionIndex !== -1) {\r\n            const ParentSection = this.FormLayout.Sections[ParentSectionIndex][subindex];\r\n            const ParentFieldIndex = ParentSection.Fields.findIndex(field => field.FieldID.toString() === ParentFieldId);\r\n            const ParentField = ParentSection.Fields[ParentFieldIndex];\r\n              if (ParentField) {\r\n                  // Taking Parent value from same sub-section\r\n                ParentValue = FormValues[ParentSectionIndex][subindex][ParentFieldIndex];\r\n              }\r\n        }\r\n        // get sub-options for selected Parent ( for eg: list of states if country selected is India)\r\n\r\n        if (FieldType === 'Country') {\r\n            if (this.customListService.countries.length > 0) {\r\n                const country = this.customListService.countries.find(c => c.CountryName === value);\r\n                suboptions = country.States;\r\n            }\r\n        }\r\n        if (FieldType === 'State') {\r\n            if (this.customListService.countries.length > 0) {\r\n                const type = this.customListService.countries.find(c =>\r\n                    c.CountryName === ParentValue\r\n                );\r\n                const States = type.States.find(c => c.StateName === value);\r\n                if (States) {\r\n                    suboptions = States.Cities;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (FieldType === 'Type') {\r\n            if (this.customListService.companytypes.length > 0) {\r\n                const type = this.customListService.companytypes.find(c => c.name === value);\r\n                suboptions = type.InstallationType;\r\n            }\r\n        }\r\n        if (FieldType === 'InstallationType') {\r\n            if (this.customListService.companytypes.length > 0) {\r\n                const type = this.customListService.companytypes.find(c =>\r\n                    c.name === ParentValue\r\n                );\r\n                const InstallationType = type.InstallationType.find(c => c.name === value);\r\n                if (InstallationType) {\r\n                    suboptions = InstallationType.Designation;\r\n                }\r\n            }\r\n        }\r\n\r\n       // Get dependent fields\r\n       const DepedentFields = this.FormLayout.Sections[sectionindex][subindex].Fields[fieldindex].DependentFieldList;\r\n       for (let i = 0; i < DepedentFields.length; i++) {\r\n\r\n        const DependentSectionId = DepedentFields[i].SectionID.toString();\r\n        const DependentFieldId = DepedentFields[i].FieldID.toString();\r\n\r\n        // Search for dependent SectionId and FieldId in all Sections. when found remove currfield from its parent field List\r\n        const DependentSectionIndex = this.ActualForm.Sections\r\n                                                .findIndex(sec => sec.SectionID.toString() === DependentSectionId);\r\n\r\n        if (DependentSectionIndex !== -1) {\r\n            const DependentSection = this.FormLayout.Sections[DependentSectionIndex][subindex];\r\n          const DependentField = DependentSection.Fields.find(field => field.FieldID.toString() === DependentFieldId);\r\n          if (DependentField) {\r\n            // Update Field.options\r\n            DependentField.options = suboptions;\r\n          }\r\n        }\r\n        }\r\n    }\r\n\r\n    GetAllCountries(sectionindex, subsectionindex, fieldindex, Formfields: FormGroup) {\r\n        // ------------------- If countries is never fetched------------//\r\n        if (this.customListService.countries.length === 0) {\r\n            this.customFormService.getCountries().subscribe(obj => {\r\n                this.customListService.countries = obj;\r\n                const field =  this.FormLayout.Sections[sectionindex][subsectionindex].Fields[fieldindex];\r\n                field.options = this.customListService.countries;\r\n                this.PushOptions(sectionindex, subsectionindex, fieldindex, Formfields, field);\r\n            });\r\n        }else {\r\n            const field =  this.FormLayout.Sections[sectionindex][subsectionindex].Fields[fieldindex];\r\n            field.options = this.customListService.countries;\r\n            this.PushOptions(sectionindex, subsectionindex, fieldindex, Formfields, field);\r\n        }\r\n    }\r\n\r\n    GetAllCompanyType(sectionindex, subsectionindex, fieldindex, Formfields: FormGroup) {\r\n        // ------------------- If company Types is never fetched------------//\r\n        if (this.customListService.companytypes.length === 0) {\r\n            this.customFormService.getCompanyTypes().subscribe(obj => {\r\n                this.customListService.companytypes = obj;\r\n                const field =  this.FormLayout.Sections[sectionindex][subsectionindex].Fields[fieldindex];\r\n                field.options = this.customListService.companytypes;\r\n                this.PushOptions(sectionindex, subsectionindex, fieldindex, Formfields, field);\r\n            });\r\n        }else {\r\n            const field =  this.FormLayout.Sections[sectionindex][subsectionindex].Fields[fieldindex];\r\n            field.options = this.customListService.companytypes;\r\n            this.PushOptions(sectionindex, subsectionindex, fieldindex, Formfields, field);\r\n        }\r\n    }\r\n\r\n    PushOptions(sectionindex, subsectionindex, fieldindex, Formfields: FormGroup, field) {\r\n        let newcontrol;\r\n\r\n        // If Partially-Filled/ fully Filled form is already present in DB\r\n        if (this.ProfileDetails != null) {\r\n            const existingdetails = this.ProfileDetails[this.FormLayout.Sections[sectionindex][subsectionindex].SectionID];\r\n            // console.log(fields.options);\r\n            let isSectionDetailAvailable = false;\r\n            if (existingdetails && existingdetails.length > 0) {\r\n                isSectionDetailAvailable = true;\r\n            }\r\n            if (isSectionDetailAvailable) { // ------If the Corresponding section is available in Applicant Form -----//\r\n                const val = existingdetails[subsectionindex][field.FieldID];\r\n                if (val) { // ------If the Corresponding field is available in Applicant Form -----//\r\n                    newcontrol = new FormControl(val, Validators.required);\r\n                }else {\r\n                    newcontrol = new FormControl(null, Validators.required);\r\n                }\r\n            }else {\r\n                newcontrol = new FormControl(null, Validators.required);\r\n            }\r\n        }else {\r\n            newcontrol = new FormControl(null, Validators.required);\r\n        }\r\n\r\n        // const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n        // const Formfields = new FormGroup({});\r\n        Formfields.addControl(fieldindex.toString(), newcontrol); // Adds new Control to Form Fields\r\n        // Formcurrsection.insert(subsectionindex, Formfields);  // Adds Form Fields to FormcurrSection\r\n        // FormAllSections.insert(sectionindex, Formcurrsection); // Adds FormCurrSection to FormAllSection\r\n        // console.log(FormAllSections);\r\n    }\r\n\r\n    CreateForm() {\r\n        this.customFormService.GetForm(this.type).subscribe((obj) => {\r\n            this.FormLayout = new Object();\r\n            this.FormLayout.Sections = new Array();\r\n\r\n            if (obj) {\r\n                this.ActualForm = obj;\r\n                this.FormTitle = obj.FormTitle;\r\n                const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n\r\n                for (let i = 0; i < obj.Sections.length; i++) {\r\n\r\n                    const currsection = JSON.parse(JSON.stringify(obj.Sections[i])); // To do Deep Copy\r\n                    const existingdetails = this.ProfileDetails[obj.Sections[i].SectionID];\r\n                    let isSectionDetailAvailable = false;\r\n\r\n                    if (existingdetails && existingdetails.length > 0) {\r\n                        currsection.count = existingdetails.length;\r\n                        isSectionDetailAvailable = true;\r\n                    }else {\r\n                        currsection.count = 1;\r\n                    }\r\n                    this.FormLayout.Sections[i] = new Array();\r\n                    const fields = currsection.Fields;\r\n                    currsection.isEditMode = false;\r\n\r\n                    const Formcurrsection = new FormArray([]);\r\n                    for (let j = 0; j < currsection.count; j++) {\r\n\r\n                        const subsection = JSON.parse(JSON.stringify(currsection));\r\n                        this.FormLayout.Sections[i].push(subsection); // To do Deep Copy\r\n\r\n                        const Formfields = new FormGroup({});\r\n\r\n                        for (let findex = 0; findex < fields.length; findex++) {\r\n                            // Get Countries List if Country type\r\n\r\n                            if (fields[findex].FieldType === 'Country') {\r\n                                // FormSectionIndex, FormCurresectionIndex, fieldindex\r\n                                this.GetAllCountries(i, j, findex, Formfields);\r\n                            }else if (fields[findex].FieldType === 'Type') {\r\n                                // FormSectionIndex, FormCurresectionIndex, fieldindex\r\n                                this.GetAllCompanyType(i, j, findex, Formfields);\r\n                            }else if (fields[findex].FieldType === 'Checkbox') {\r\n                                const checkboxoptionArray = new FormArray([]);\r\n\r\n                                for (let count = 0; count < fields[findex].options.length; count++) {\r\n                                    const option = fields[findex].options[count];\r\n                                    let optioncontrol;\r\n\r\n                                    if (isSectionDetailAvailable) {\r\n                                        if (this.checkOptionInProfile(obj.Sections[i].SectionID, j, option, fields[findex].FieldID)) {\r\n                                            optioncontrol = new FormControl(true, Validators.required);\r\n                                        }else {\r\n                                            optioncontrol = new FormControl(false, Validators.required);\r\n                                        }\r\n                                    }else {\r\n                                        optioncontrol = new FormControl(false, Validators.required);\r\n                                    }\r\n                                    checkboxoptionArray.push(optioncontrol);\r\n                                }\r\n                                Formfields.addControl(findex.toString(), checkboxoptionArray);\r\n                            }else {\r\n                                let newcontrol;\r\n                                if (isSectionDetailAvailable) {\r\n                                    const val = existingdetails[j][fields[findex].FieldID];\r\n                                    if (val) {\r\n                                        newcontrol = new FormControl(val, Validators.required);\r\n                                    }else {\r\n                                        newcontrol = new FormControl(null, Validators.required);\r\n                                    }\r\n                                }else {\r\n                                    newcontrol = new FormControl(null, Validators.required);\r\n                                }\r\n                                Formfields.addControl(findex.toString(), newcontrol);\r\n                            }\r\n                        }\r\n                        // console.log(j);\r\n                        Formcurrsection.push(Formfields);\r\n                    }\r\n                    FormAllSections.push(Formcurrsection);\r\n                }\r\n               // console.log(FormAllSections);\r\n               // console.log(this.FormLayout);\r\n            }\r\n        });\r\n    }\r\n\r\n    CreateEmptyForm() {\r\n        // console.log(this.type);\r\n        this.customFormService.GetForm(this.type).subscribe((obj) => {\r\n            this.FormLayout = new Object();\r\n            this.FormLayout.Sections = new Array();\r\n            if (obj) {\r\n                this.ActualForm = obj;\r\n                this.FormTitle = obj.FormTitle;\r\n                const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n\r\n                for (let i = 0; i < obj.Sections.length; i++) {\r\n\r\n                    const currsection = JSON.parse(JSON.stringify(obj.Sections[i])); // To do Deep Copy\r\n                    // console.log(JSON.stringify(obj.Sections[i]));\r\n\r\n                    currsection.isEditMode = false;\r\n                    currsection.count = 1;\r\n                    // Each Section is an Array of Sub section. Initially in an Empty form Section has only 1 SubSection //\r\n                    this.FormLayout.Sections[i] = new Array();\r\n                    const fields = currsection.Fields;\r\n\r\n                    const Formcurrsection = new FormArray([]);\r\n                    for (let j = 0; j < currsection.count; j++) {\r\n                        this.FormLayout.Sections[i].push(currsection);\r\n                        const Formfields = new FormGroup({});\r\n\r\n                        for (let findex = 0; findex < fields.length; findex++) {\r\n                            if (fields[findex].FieldType === 'Country') {\r\n\r\n                                this.GetAllCountries(i, j, findex, Formfields);\r\n                                const newcontrol = new FormControl(null, Validators.required);\r\n                                Formfields.addControl(findex.toString(), newcontrol);\r\n\r\n                            }else if (fields[findex].FieldType === 'Type') {\r\n\r\n                                this.GetAllCompanyType(i, j, findex, Formfields);\r\n                                const newcontrol = new FormControl(null, Validators.required);\r\n                                Formfields.addControl(findex.toString(), newcontrol);\r\n\r\n                            }else if (fields[findex].FieldType === 'Checkbox') {\r\n                                const checkboxoptionArray = new FormArray([]);\r\n\r\n                                for (let count = 0; count < fields[findex].options.length; count++) {\r\n                                    const option = fields[findex].options[count];\r\n                                    let optioncontrol;\r\n                                    optioncontrol = new FormControl(false, Validators.required);\r\n\r\n                                    checkboxoptionArray.push(optioncontrol);\r\n                                }\r\n                                Formfields.addControl(findex.toString(), checkboxoptionArray);\r\n                            }else {\r\n                                const newcontrol = new FormControl(null, Validators.required);\r\n                                Formfields.addControl(findex.toString(), newcontrol);\r\n                            }\r\n                        }\r\n                        Formcurrsection.push(Formfields);\r\n                    }\r\n                    FormAllSections.push(Formcurrsection);\r\n                    // console.log(FormAllSections);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    AddSubSection(currsectionindex) {\r\n        const currsection = this.FormLayout.Sections[currsectionindex][0];\r\n        const newSubSection = JSON.parse(JSON.stringify(currsection));\r\n        newSubSection.isEditMode = true;\r\n        const fields = currsection.Fields;\r\n\r\n        const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n        // console.log(FormAllSections);\r\n        const Formcurrsection = FormAllSections.controls[currsectionindex] as FormArray;\r\n\r\n        const Formfields = new FormGroup({});\r\n        for (let findex = 0; findex < fields.length; findex++) {\r\n\r\n            if (fields[findex].FieldType === 'Checkbox') {\r\n                const checkboxoptionArray = new FormArray([]);\r\n\r\n                for (let count = 0; count < fields[findex].options.length; count++) {\r\n                    const option = fields[findex].options[count];\r\n                    let optioncontrol;\r\n                    optioncontrol = new FormControl(false, Validators.required);\r\n\r\n                    checkboxoptionArray.push(optioncontrol);\r\n                }\r\n                Formfields.addControl(findex.toString(), checkboxoptionArray);\r\n            }else {\r\n                const newcontrol = new FormControl(null, Validators.required);\r\n                Formfields.addControl(findex.toString(), newcontrol);\r\n            }\r\n        }\r\n\r\n        Formcurrsection.push(Formfields);\r\n        this.FormLayout.Sections[currsectionindex].push(newSubSection);\r\n        this.isFormSaved = 2;\r\n    }\r\n\r\n    RemoveSubSection(currsectionindex, subindex) {\r\n        // Check if only one subsection/row then don't remove row\r\n        if (this.FormLayout.Sections[currsectionindex].length > 1) {\r\n            const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n            // console.log(FormAllSections);\r\n            const Formcurrsection = FormAllSections.controls[currsectionindex] as FormArray;\r\n            Formcurrsection.removeAt(subindex);\r\n            // console.log(this.FormLayout.Sections[currsectionindex][subindex]);\r\n            const subsectionarray = this.FormLayout.Sections[currsectionindex];\r\n            subsectionarray.splice(subindex, 1);\r\n        }\r\n        this.isFormSaved = 2;\r\n    }\r\n\r\n    EditSubSection(sectionindex, subindex) {\r\n        this.FormLayout.Sections[sectionindex][subindex].isEditMode = true;\r\n        this.isFormSaved = 2;\r\n    }\r\n\r\n    onSavesubSection(sectionindex, subindex) {\r\n        this.FormLayout.Sections[sectionindex][subindex].isEditMode = false;\r\n        this.isFormSaved = 2;\r\n    }\r\n\r\n    // onSaveSection(secindex) {\r\n\r\n    //     const obj = {};\r\n    //     const oldobj = { _id: this.sessionData._id };\r\n\r\n    //     const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n    //     const FormValues = FormAllSections.value;\r\n    //     // console.log(FormValues);\r\n    //     const sectionid = this.FormLayout.Sections[secindex][0].SectionID;\r\n    //     obj[this.FormLayout.Sections[secindex][0].SectionID] = [];\r\n\r\n    //     for (let subsecindex = 0; subsecindex > this.FormLayout.Sections[secindex].length; subsecindex++) {\r\n    //         const fieldsobj = {};\r\n    //         const Fields = this.FormLayout.Sections[secindex][subsecindex].Fields;\r\n    //         for (let findex = 0; findex < Fields.length; findex++) {\r\n    //             const field = Fields[findex];\r\n    //             const fieldid = field.FieldID;\r\n    //             // console.log(fieldid);\r\n    //             const fieldvalue = FormValues[secindex][subsecindex][findex];\r\n    //             // console.log(fieldvalue);\r\n    //             if (field.FieldType === 'Checkbox') {\r\n    //                 fieldsobj[fieldid] = new Array();\r\n    //                 for (let j = 0; j < field.options.length; j++) {\r\n    //                     if (fieldvalue[j]) {\r\n    //                         fieldsobj[fieldid].push(field.options[j]);\r\n    //                     }\r\n    //                 }\r\n    //             }else {\r\n    //                 fieldsobj[fieldid] = fieldvalue;\r\n    //             }\r\n    //         }\r\n    //         obj[sectionid].push(fieldsobj);\r\n    //         this.FormLayout.Sections[secindex][subsecindex].isEditMode = false;\r\n    //     }\r\n\r\n    //     this.customFormService.UpdateApplicantProfile(oldobj, obj).subscribe((res) => {\r\n    //         if (res) {\r\n    //             this.ProfileDetails = res;\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    onSaveForm() {\r\n        const FormAllSections = this.ProfileForm.get('customcontrols') as FormArray;\r\n        const FormValues = FormAllSections.value;\r\n        // console.log(FormValues);\r\n\r\n        const obj = { _id: this.sessionData._id, type: this.sessionData.type };\r\n        const Sections = this.FormLayout.Sections;\r\n        for (let secindex = 0; secindex < this.FormLayout.Sections.length; secindex++) {\r\n            // Assuming atleast 1 sub section in a section\r\n            obj[Sections[secindex][0].SectionID] = [];\r\n\r\n            for (let subsecindex = 0; subsecindex < Sections[secindex].length; subsecindex++) {\r\n                const fieldsobj = {};\r\n                const Subsection = Sections[secindex][subsecindex];\r\n                Sections[secindex][subsecindex].isEditMode = false;\r\n                for (let i = 0; i < Subsection.Fields.length; i++) {\r\n                    const field = Subsection.Fields[i];\r\n                    const fieldid = field.FieldID;\r\n                    const fieldvalue = FormValues[secindex][subsecindex][i];\r\n                    // console.log(fieldvalue);\r\n\r\n                    if (field.FieldType === 'Checkbox') {\r\n                        fieldsobj[fieldid] = new Array();\r\n                        for (let j = 0; j < field.options.length; j++) {\r\n                            if (fieldvalue[j]) {\r\n                                fieldsobj[fieldid].push(field.options[j]);\r\n                            }\r\n                        }\r\n                    }else {\r\n                        fieldsobj[fieldid] = fieldvalue;\r\n                    }\r\n                }\r\n                obj[Sections[secindex][subsecindex].SectionID].push(fieldsobj);\r\n            }\r\n        }\r\n        // console.log(obj);\r\n\r\n        this.customFormService.SaveApplicantForm(obj).subscribe(res => {\r\n            // console.log(res);\r\n            if (res) {\r\n                this.isApplicationFilled = true;\r\n                this.ProfileDetails = res;\r\n                this.isFormSaved = 1;\r\n            }else {\r\n                this.isFormSaved = -1;\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/applicant-form/applicant-form.component.ts","import { Component, OnInit, Input, ViewChildren, QueryList } from '@angular/core';\nimport { CustomFormService } from '../custom-form.service';\nimport * as _ from 'lodash';\nimport * as jsPDF from 'jspdf';\nimport { FormModel } from '../form.model';\nimport { SectionModel } from '../Section.model';\n\n@Component({\n  selector: 'app-applicant-list',\n  templateUrl: './applicant-list.component.html',\n  styleUrls: ['./applicant-list.component.css']\n})\nexport class ApplicantListComponent implements OnInit {\n  AllApplicants: any[];\n  FormsList: FormModel[];\n  ApplicantsDetails: any[];\n  FilterText: string;\n  userFilter: any = {};\n  PersonalDetailsID = '5b8552293763452b047283cd';  // Should be same across all the forms\n\n  SelectedType = {\n    type: '',\n    fields: [],\n    applicants: [],\n    count_applicants: 0\n  };\n  isApplicantFiltered: boolean[];\n  isApplicantChecked: boolean[];\n  @ViewChildren('ApplicantProfiles') ApplicantProfiles: QueryList<any>;\n\n  constructor(private customFormService: CustomFormService) {}\n\n  ngOnInit() {\n\n    this.customFormService.GetAllApplicantsPersonalDetails(this.PersonalDetailsID).subscribe(obj => {\n      if (obj && obj.length) {\n        this.AllApplicants = obj;\n\n        this.customFormService.GetAllForms().subscribe(form => {\n          if (form && form.length) {\n            this.FormsList = form;\n          }\n          this.CategorizeApplicant();\n        });\n      }\n    });\n\n  }\n\n  isEmpty(text) {\n    return _.isEmpty(text);\n  }\n\n  OnSearch() {\n  // console.log('OnFilterchnage');\n    if (_.isEmpty(this.FilterText)) {\n      this.isApplicantFiltered.fill(true, 0);\n    }else {\n      const searchedtext = _.toLower(this.FilterText);\n\n      this.SelectedType.applicants.forEach((item, index) => {\n\n          this.SelectedType.fields.some((field) => {\n            const val = _.toLower(item[field.FieldName]);\n           // console.log(val);\n            if (val.indexOf(searchedtext) !== -1) {\n              this.isApplicantFiltered[index] = true;\n              return true;\n            }else {\n              this.isApplicantFiltered[index] = false;\n            }\n          });\n      });\n    }\n  }\n\n  OnClearSearch() {\n    this.FilterText = '';\n    this.isApplicantFiltered.fill(true, 0);\n  }\n\n  OnSelectApplicantType(index) {\n    // console.log('OnSelectApplicantType');\n    this.SelectedType = this.ApplicantsDetails[index];\n    this.FilterText = '';\n    this.isApplicantChecked = new Array(this.SelectedType.count_applicants);\n    this.isApplicantFiltered = new Array(this.SelectedType.count_applicants);\n\n    this.isApplicantChecked.fill(false, 0);\n    this.isApplicantFiltered.fill(true, 0);\n    // console.log(this.isApplicantFiltered);\n    // console.log(this.isApplicantChecked);\n   }\n\n   ToggleApplicantSelection(index) {\n     // console.log(this.isApplicantChecked);\n    this.isApplicantChecked[index] = !this.isApplicantChecked[index];\n   // console.log(this.isApplicantChecked);\n   }\n\n  CategorizeApplicant() {\n    this.ApplicantsDetails = new Array();\n\n    this.FormsList.forEach((form) => {\n      const obj = {};\n      obj['type'] = form.FormTypeName; // form type\n      obj['fields'] = [];\n      console.log(form);\n      const section = form.Sections.filter(s => {\n        return s.SectionID.includes(this.PersonalDetailsID);\n      });\n\n      if (section.length) {\n        obj['fields'] = section[0].Fields;\n      }\n\n      obj['applicants'] = [];\n\n      // ---------For each applicant get Personal Details----------//\n      this.AllApplicants.forEach((applicant) => {\n        // ----Check if Applicant type, is of current Form type and has PersonalDetials section----//\n        if (applicant.type === form.FormType && applicant[this.PersonalDetailsID] && applicant[this.PersonalDetailsID].length > 0) {\n\n          const values = applicant[this.PersonalDetailsID][0]; // values object stores values for differnent field.\n          const singleapplicant = {applicantID: applicant._id};\n          obj['fields'].forEach(field => {\n            singleapplicant[field.FieldName] = values[field.FieldID];\n          });\n\n          obj['applicants'].push(singleapplicant);\n        }\n      });\n\n      obj['count_applicants'] = obj['applicants'].length;\n      // Applicant Details categorizes applicants in number of applicant type category,\n      // Each element of ApplicantDetials has list of applicants under that category\n      this.ApplicantsDetails.push(obj);\n    });\n    // console.log(this.ApplicantsDetails);\n  }\n\n  ExportSelectedProfiles() {\n    console.log('Export to pdf');\n    this.ApplicantProfiles.forEach((profile, index) => {\n      if (this.isApplicantChecked[index]) {\n\n        const doc = new jsPDF();\n        const specialElementHandlers = {\n          '#editor': function(element, renderer){\n            return true;\n          }\n        };\n\n        const content = profile.nativeElement;\n        doc.fromHTML(content.innerHTML, 15, 15, {\n          'width': 190,\n          'elementHandlers': specialElementHandlers\n        });\n        const filename = 'Applicant' + this.SelectedType.applicants[index]['Name'] + '.pdf';\n        doc.save(filename);\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/applicant-list/applicant-list.component.ts","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { CustomFormService } from '../custom-form.service';\nimport { FormModel } from '../form.model';\nimport * as jsPDF from 'jspdf';\n\n@Component({\n  selector: 'app-applicant-profile',\n  templateUrl: './applicant-profile.component.html',\n  styleUrls: ['./applicant-profile.component.css']\n})\nexport class ApplicantProfileComponent implements OnInit {\n\n  Applicant;\n  Form: FormModel;\n  TemplateList: any[];\n  @ViewChild('ApplicantProfile') ApplicantProfile: ElementRef;\n  constructor(private route: ActivatedRoute, private router: Router, private customFormService: CustomFormService) { }\n\n  ngOnInit() {\n    this.Form = new FormModel();\n    this.Applicant = {};\n\n    this.route.params.subscribe((params: Params) => {\n      const id = params['id'];\n      this.customFormService.GetApplicantProfile(id).subscribe((obj) => {\n        if (obj) {\n          this.Applicant = obj;\n          this.customFormService.GetForm(this.Applicant.type).subscribe((form) => {\n            if (form) {\n              this.Form = form;\n              this.OnSelectForm();\n              this.GetAllFormTemplates(this.Form._id);\n            }\n          });\n        }\n      });\n    });\n\n  }\n\n  OnSelectForm() {\n    // Inititally all the fields of the form are displayed.\n    for (let sec = 0; sec < this.Form.Sections.length; sec++) {\n      const currsec = this.Form.Sections[sec];\n      for (let findex = 0; findex < currsec.Fields.length; findex++) {\n        currsec.Fields[findex].isFieldChecked = true;\n      }\n    }\n  }\n\n  GetFieldValue(SectionID, index, FieldID) {\n    if (this.Applicant[SectionID]) {\n      return this.Applicant[SectionID][index][FieldID];\n    }\n    return '';\n  }\n\n  GetSectionCount(SectionID) {\n    if (this.Applicant[SectionID]) {\n      return this.Applicant[SectionID].length;\n    }\n    return 0;\n  }\n\n  GetAllFormTemplates(formID) {\n    this.customFormService.GetTemplatesByFormID(formID).subscribe((temp) => {\n      if (temp && temp.length) {\n        this.TemplateList = temp;\n      }\n    });\n  }\n\n  CheckedFieldCount(secindex) {\n    return this.Form.Sections[secindex].Fields.filter((field) => {\n      return field.isFieldChecked === true;\n    }).length;\n  }\n\n  OnSelectTemplate(val) {\n    const index: number = val.target['selectedIndex'];\n\n    if (index === 0) {\n      this.OnSelectForm();\n    }else {\n      const SelectedTemplate = this.TemplateList[index - 1];\n      const Section = {};\n\n      for (let sec = 0; sec < this.Form.Sections.length; sec++) {\n        const currsec = this.Form.Sections[sec];\n        Section[currsec.SectionID] = sec; // storing the index\n      }\n\n      for (let i = 0; i < SelectedTemplate.Sections.length; i++) {\n        const templatesec = SelectedTemplate.Sections[i];\n\n        // If Section is present in template section look for fields in Template\n        if (Section.hasOwnProperty(templatesec.SectionID)) {\n          const secindex = Section[templatesec.SectionID];\n\n          const currsec = this.Form.Sections[secindex];\n          const formfields = currsec.Fields;\n\n          for (let findex = 0; findex < formfields.length; findex++) {\n\n            const isFieldpresent = templatesec.Fields.filter((field) => {\n              return field === formfields[findex].FieldID;\n            });\n\n            if (isFieldpresent.length) {\n              currsec.Fields[findex].isFieldChecked = true;\n            }else {\n              currsec.Fields[findex].isFieldChecked = false;\n            }\n\n          }\n          console.log(SelectedTemplate);\n        }\n      }\n    }\n\n  }\n\n  PrintToPdf() {\n    console.log('Export to pdf');\n\n    const doc = new jsPDF();\n    const specialElementHandlers = {\n      '#editor': function (element, renderer) {\n        return true;\n      }\n    };\n    const content = this.ApplicantProfile.nativeElement;\n    doc.fromHTML(content.innerHTML, 15, 15, {\n      'width': 190,\n      'elementHandlers': specialElementHandlers\n    });\n\n    console.log(content);\n    const filename = 'Applicant' + this.Applicant._id + '.pdf';\n    doc.save(filename);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/applicant-profile/applicant-profile.component.ts","import { Component, OnInit, Input , OnChanges, Output, EventEmitter} from '@angular/core';\nimport { CustomFormService } from '../custom-form.service';\nimport { AuthService } from '../../auth/auth.service';\n\nimport { SectionModel } from '../section.model';\nimport { FormModel } from '../form.model';\nimport { FormControlModel } from '../form-control.model';\nimport { FieldModel } from '../field.model';\nimport { THROW_IF_NOT_FOUND } from '@angular/core/src/di/injector';\nconst ObjectID = require('bson-objectid');\n\n\n@Component({\n  selector: 'app-create-form',\n  templateUrl: './create-form.component.html',\n  styleUrls: ['./create-form.component.css']\n})\n\nexport class CreateFormComponent implements OnInit, OnChanges {\n  @Input() SelectedForm = new FormModel();\n  @Output() FormSaved = new EventEmitter();\n\n  Error: string;\n  controls: Array<FormControlModel>;\n  totalcontrols: number;\n  TotalSections = 0;\n  ApplicantType;\n  FormSuccessMessage = 0;\n\n  ngOnChanges() {\n      this.TotalSections = this.SelectedForm.Sections.length;\n  }\n\n  constructor(private customFormService: CustomFormService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getApplicantType().subscribe(obj => {\n      // console.log(obj);\n      this.ApplicantType = obj;\n    });\n\n    this.customFormService.GetFormControls().subscribe((obj) => {\n      this.controls = new Array();\n      for (let i = 0 ; i < obj.length; i++) {\n        const control = new FormControlModel();\n        control.Type = obj[i].FieldType;\n        control.isMultipleOption = obj[i].isMultipleOption;\n        control.Total = 0;\n        control.Table = obj[i].Table ? obj[i].Table : '';\n        control.ParentType = obj[i].parent ? obj[i].parent : '';\n        if (control.isMultipleOption) {\n          control.optionCount = 1;\n        }else {\n          control.optionCount = 0;\n        }\n        this.controls.push(control);\n      }\n      this.totalcontrols = this.controls.length;\n      // console.log(this.controls);\n    });\n  }\n\n  OnSave() {\n    // console.log(this.SelectedForm);\n    this.customFormService.SaveForm(this.SelectedForm)\n    .subscribe(obj => {\n      if (obj) {\n        this.SelectedForm._id = obj._id;\n        this.FormSaved.emit(this.SelectedForm);\n        this.FormSuccessMessage = 1;\n      }else {\n        this.FormSuccessMessage = -1;\n      }\n  });\n  }\n\n  OnSelectFormType(event) {\n    const index: number = event.target['selectedIndex'];\n    this.SelectedForm.FormTypeName = this.ApplicantType[index].type;\n   // console.log(this.SelectedForm.FormTypeName);\n  }\n\n  OnOptionChange(sectionindex, fieldindex, newvalue, optionindex) {\n    this.SelectedForm.Sections[sectionindex].Fields[fieldindex].options[optionindex] = newvalue;\n  }\n\n  AddOption(sectionindex, fieldindex) {\n    const optionlabel = 'Option ' + this.SelectedForm.Sections[sectionindex].Fields[fieldindex].options.length;\n    this.SelectedForm.Sections[sectionindex].Fields[fieldindex].options.push(optionlabel);\n  }\n\n  RemoveOption(sectionindex, fieldindex, optionindex) {\n    this.SelectedForm.Sections[sectionindex].Fields[fieldindex].options.splice(optionindex, 1);\n  }\n\n  AddSection() {\n    const newSection = new SectionModel();\n    newSection.SectionID = ObjectID();\n    newSection.SectionName = 'Section ' +  this.TotalSections;\n    newSection.CanBeMultiple = false;\n    newSection.Fields = new Array<FieldModel>();\n    // let fieldcount = 0;\n    // Add Fields logic\n    // for (let i = 0; i < this.totalcontrols; i++) {\n    //   {\n    //     for (let j = 0; j < this.controls[i].Total; j++) {\n    //       const newField = new FieldModel();\n    //       newField.FieldID = ObjectID();\n    //       newField.FieldName = 'Field ' +  fieldcount;\n    //       newField.FieldType = this.controls[i].Type;\n    //       newField.options = new Array();\n    //       const optioncount = this.controls[i].optionCount;\n\n    //       for (let count = 0; count < optioncount; count++) {\n    //         const optionlabel = 'Option ' + count;\n    //         newField.options.push(optionlabel);\n    //       }\n\n    //       newSection.Fields.push(newField);\n    //       fieldcount++;\n    //     }\n    //   }\n    // }\n    this.SelectedForm.Sections.push(newSection);\n    // console.log(this.SelectedForm.Sections);\n    this.TotalSections++;\n  }\n\n  RemoveSection(sectionindex) {\n    this.SelectedForm.Sections.splice(sectionindex, 1);\n  }\n\n  AddParentField(sectionIndex, fieldindex, SelectedParent) {\n    // Add the Parent Field\n    SelectedParent = JSON.parse(SelectedParent);\n    const ParentSectionId = SelectedParent.SectionID.toString();\n    const ParentFieldId = SelectedParent.FieldID.toString();\n    const DependentSectionId = this.SelectedForm.Sections[sectionIndex].SectionID.toString();\n    const DependentFieldId = this.SelectedForm.Sections[sectionIndex].Fields[fieldindex].FieldID.toString();\n    const DependentFieldName = this.SelectedForm.Sections[sectionIndex].Fields[fieldindex].FieldName;\n\n    // -- Add the selected Parent to Field's ParentField-- //\n    this.SelectedForm.Sections[sectionIndex].Fields[fieldindex].ParentField.FieldID = SelectedParent.FieldID;\n    this.SelectedForm.Sections[sectionIndex].Fields[fieldindex].ParentField.SectionID = SelectedParent.SectionID;\n\n    // --Add to Parent Field's Dependency List-- //\n    const ParentSection = this.SelectedForm.Sections.find(sec => sec.SectionID.toString() === ParentSectionId);\n    if (ParentSection) {\n      const ParentField = ParentSection.Fields.find(field => field.FieldID.toString() === ParentFieldId);\n      if (ParentField) {\n        // Push only if its not already in dependent list.\n        if (! ParentField.DependentFieldList.find(field => field.FieldID.toString() === DependentFieldId)) {\n          ParentField.DependentFieldList.push({FieldID: DependentFieldId, SectionID: DependentSectionId});\n        }\n        }\n    }\n}\n\n  GetParentList(sectionIndex, CurrField: FieldModel) {\n    const ParentFieldType = CurrField.ParentField.FieldType;\n    let FieldList;\n    for (let secind = 0; secind < this.SelectedForm.Sections.length; secind++) {\n       FieldList = this.SelectedForm.Sections[secind].Fields.filter( field => {\n        return field.FieldType === ParentFieldType;\n      }).map(elem => {\n        return {\n          FieldID: elem.FieldID.toString(),\n          FieldName: elem.FieldName,\n          SectionID: this.SelectedForm.Sections[secind].SectionID.toString()\n        };\n      });\n      if (FieldList.length > 0) {\n        // Merge the Dependency List Array with FieldList(List of Fields with Parent Field Type) obtained above.\n        Array.prototype.push.apply(CurrField.ParentField.FieldList, FieldList);\n      }\n    }\n    if (CurrField.ParentField.FieldList.length !== 0) {\n      this.SelectedForm.Sections[sectionIndex].Fields.push(CurrField);\n    }else {\n      this.Error = 'No ' + CurrField.ParentField.FieldType + ' Field Found. Add ' + CurrField.ParentField.FieldType + ' Field First.' ;\n    }\n  }\n\n  AddField(SectionIndex, control: FormControlModel) {\n    const fieldcount = this.SelectedForm.Sections[SectionIndex].Fields.length;\n    const newField = new FieldModel();\n    newField.FieldID = ObjectID();\n    newField.FieldName = 'Field ' + fieldcount;\n    newField.FieldType = control.Type;\n    newField.Table = control.Table;\n    newField.ParentField = {FieldType: control.ParentType, FieldList: new Array(), FieldID: null, SectionID: null};\n    newField.DependentFieldList = new Array();\n    newField.options = new Array();\n    if (control.Table !== '') {\n      if (control.ParentType) {\n        this.GetParentList(SectionIndex, newField);\n      }else {\n        this.SelectedForm.Sections[SectionIndex].Fields.push(newField);\n        // this.GetOptionsinList(control, fieldcount, SectionIndex);\n      }\n    }else {\n      for (let count = 0; count < control.optionCount; count++) {\n      const optionlabel = 'Option ' + count;\n      newField.options.push(optionlabel);\n    }\n    this.SelectedForm.Sections[SectionIndex].Fields.push(newField);\n    }\n  }\n\n  RemoveField(sectionindex, fieldindex) {\n    const currFieldId = this.SelectedForm.Sections[sectionindex].Fields[fieldindex].FieldID.toString();\n    const currSectionId = this.SelectedForm.Sections[sectionindex].SectionID.toString();\n\n    const currFieldParentSectionId = this.SelectedForm.Sections[sectionindex].Fields[fieldindex].ParentField.SectionID;\n    const currFieldParentFieldId = this.SelectedForm.Sections[sectionindex].Fields[fieldindex].ParentField.FieldID;\n\n    const DepedentFields = this.SelectedForm.Sections[sectionindex].Fields[fieldindex].DependentFieldList; // only fieldId and SectionId\n\n    // Remove this Field from all dependent Fields\n    for (let i = 0; i < DepedentFields.length; i++) {\n\n      const DependentSectionId = DepedentFields[i].SectionID.toString();\n      const DependentFieldId = DepedentFields[i].FieldID.toString();\n\n      // Search for dependent SectionId and FieldId in all Sections. when found remove currfield from its parent field List\n      const DependentSection = this.SelectedForm.Sections.find(sec => sec.SectionID.toString() === DependentSectionId);\n      if (DependentSection) {\n        const DependentField = DependentSection.Fields.find(field => field.FieldID.toString() === DependentFieldId);\n        if (DependentField) {\n          if (DependentField.ParentField.FieldID === currFieldId) {\n            DependentField.ParentField.FieldID = null;\n          }\n          // Removing CurrField from Dependent Field's ParentList\n          DependentField.ParentField.FieldList = DependentField.ParentField.FieldList\n                                                                .reduce((p, c) => (c.FieldID !== currFieldId && p.push(c), p), []);\n         // Add code to check if parent fieldlist is empty after this operation then?\n        }\n      }\n  }\n  // Remove this Field from Parent Field\n  if (currFieldParentFieldId !== null) {\n    const ParentSection = this.SelectedForm.Sections.find(sec => sec.SectionID.toString() === currFieldParentSectionId.toString());\n    if (ParentSection) {\n      const ParentField = ParentSection.Fields.find(field => field.FieldID.toString() === currFieldParentFieldId.toString());\n      // Removing Curr Field from Parent Field's Dependency List\n      if (ParentField) {\n        ParentField.DependentFieldList = ParentField.DependentFieldList\n                                                              .reduce((p, c) => (c.FieldID !== currFieldId && p.push(c), p), []);\n      }\n    }\n  }\n  // Remove this Field from Curr Section Fields Array\n  this.SelectedForm.Sections[sectionindex].Fields.splice(fieldindex, 1);\n\n  }\n\n  GetFieldName(sectionId, fieldId) {\n    const ParentSection = this.SelectedForm.Sections.find(sec => sec.SectionID.toString() === sectionId.toString());\n    if (ParentSection) {\n      const ParentField = ParentSection.Fields.find(field => field.FieldID.toString() === fieldId.toString());\n      if (ParentField) {\n        return ParentField.FieldName;\n        }\n    }\n  }\n\n  GetOptionsinList(control: FormControlModel, fieldIndex, SectionIndex) {\n    if (control.ParentType === '') {\n      switch (control.Table) {\n        case 'Countries':\n          this.customFormService.getCountries().subscribe(obj => {\n            // console.log(obj);\n            for (let count = 0; count < obj.length; count++) {\n            const optionlabel = obj[count].CountryName;\n            this.SelectedForm.Sections[SectionIndex].Fields[fieldIndex].options.push(optionlabel);\n          }\n        });\n        break;\n\n        case 'CompanyName':\n        // this.authService.getStates().subscribe(obj => {\n        //   // console.log(obj);\n        //   this.ApplicantType = obj;\n        // });\n        break;\n      }\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/create-form/create-form.component.ts","import { Component, OnInit } from '@angular/core';\nimport { CustomFormService } from '../custom-form.service';\nimport { FormModel } from '../form.model';\nimport { TemplateModel } from '../template.model';\nimport { SectionModel } from '../Section.model';\nimport { FieldModel } from '../field.model';\n\n@Component({\n  selector: 'app-create-template',\n  templateUrl: './create-template.component.html',\n  styleUrls: ['./create-template.component.css']\n})\nexport class CreateTemplateComponent implements OnInit {\n  TemplatesList: any[];\n  FormsList: FormModel[];\n  isFieldChecked: any[];\n  SelectedForm: FormModel;\n  createMode: boolean;\n  FieldCheckedCount: number;\n  TemplateTitle: string;\n  TemplateID: string;\n  TotalFieldsChecked: number;\n  TemplateSaved = 0;\n\n  constructor(private customFormService: CustomFormService) { }\n\n  ngOnInit() {\n    this.GetAllTemplates();\n    this.GetAllForms();\n  }\n\n  GetAllTemplates() {\n    this.customFormService.GetAllTemplates().subscribe(obj => {\n      if (obj && obj.length) {\n        this.TemplatesList = obj;\n      }\n    });\n  }\n\n  GetAllForms() {\n    this.customFormService.GetAllForms().subscribe(obj => {\n      if (obj && obj.length) {\n        this.FormsList = obj;\n      }\n    });\n  }\n\n  OnEditTemplate(index) {\n    const SelectedTemplate = this.TemplatesList[index];\n    this.TemplateTitle = SelectedTemplate.TemplateTitle;\n    this.TemplateID = SelectedTemplate._id;\n    const Form = this.FormsList.filter(form => {\n      return form._id === SelectedTemplate.FormID;\n    });\n\n    if (Form.length) {\n      this.SelectedForm = Form[0];\n      this.TotalFieldsChecked = 0;\n      const Section = {};\n\n      // Check if Form section is present in the selected Template Sections\n      for (let sec = 0; sec < this.SelectedForm.Sections.length; sec++) {\n        const currsec = this.SelectedForm.Sections[sec];\n        Section[currsec.SectionID] = sec; // storing the index\n      }\n\n      for (let i = 0; i < SelectedTemplate.Sections.length; i++) {\n        const templatesec = SelectedTemplate.Sections[i];\n\n        // If Section is present in template section look for fields in Template\n        if (Section.hasOwnProperty(templatesec.SectionID)) {\n          const secindex = Section[templatesec.SectionID];\n\n          const currsec = this.SelectedForm.Sections[secindex];\n          const formfields = currsec.Fields;\n\n          for (let findex = 0; findex < formfields.length; findex++) {\n\n            const isFieldpresent = templatesec.Fields.filter((field) => {\n              return field === formfields[findex].FieldID;\n            });\n\n            if (isFieldpresent.length) {\n              currsec.Fields[findex].isFieldChecked = true;\n              this.TotalFieldsChecked++;\n            }else {\n              currsec.Fields[findex].isFieldChecked = false;\n            }\n\n          }\n          // console.log(this.SelectedForm);\n        }\n      }\n    }\n    this.createMode = true;\n  }\n\n  OnSelectForm(val) {\n\n    const index: number = val.target['selectedIndex'];\n    this.SelectedForm = this.FormsList[index - 1]; // 'Select Form is also 0th option'\n    for (let sec = 0; sec < this.SelectedForm.Sections.length; sec++) {\n      const currsec = this.SelectedForm.Sections[sec];\n      for (let findex = 0; findex < currsec.Fields.length; findex++) {\n        currsec.Fields[findex].isFieldChecked = true;\n        this.TotalFieldsChecked++;\n      }\n    }\n  }\n\n  ToggleFieldSelection(secindex, fieldindex) {\n    this.SelectedForm.Sections[secindex].Fields[fieldindex].isFieldChecked = !this.SelectedForm.Sections[secindex].Fields[fieldindex]\n                                                                                                                  .isFieldChecked;\n    if (this.SelectedForm.Sections[secindex].Fields[fieldindex].isFieldChecked) {\n      this.TotalFieldsChecked++;\n    }else {\n      this.TotalFieldsChecked--;\n    }\n  }\n\n  CheckedFieldCount(secindex) {\n    return this.SelectedForm.Sections[secindex].Fields.filter((field) => {\n      return field.isFieldChecked === true;\n    }).length;\n  }\n\n  OnCreateTemplate() {\n    this.createMode = true;\n    this.SelectedForm = new FormModel();\n    this.TemplateTitle = 'Template Title';\n    this.TemplateID = null;\n    this.SelectedForm.Sections = new Array();\n    this.TotalFieldsChecked = 0;\n  }\n\n  OnSaveTemplate() {\n    const template = {\n      FormID: this.SelectedForm._id,\n      FormType: this.SelectedForm.FormType,\n      TemplateTitle: this.TemplateTitle,\n      _id: this.TemplateID\n    };\n    template['Sections'] = new Array();\n\n    for (let secindex = 0; secindex < this.SelectedForm.Sections.length; secindex++) {\n      const fields = this.SelectedForm.Sections[secindex].Fields;\n      const currsec = this.SelectedForm.Sections[secindex];\n\n      const checkedfields = fields.filter(field => {\n        return field.isFieldChecked === true;\n      }).map(field => {\n        return field.FieldID;\n      });\n\n      if (checkedfields.length > 0) {\n        const currobj = {};\n        currobj['SectionID'] = currsec.SectionID;\n        currobj['Fields'] = checkedfields;\n        template['Sections'].push(currobj);\n      }\n    }\n\n    this.customFormService.SaveTemplate(template).subscribe((obj) => {\n      if (obj) {\n        this.GetAllTemplates();\n        this.TemplateSaved = 1;\n      }else {\n        this.TemplateSaved = -1;\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/create-template/create-template.component.ts","import { FormControlModel } from './form-control.model';\r\n\r\nexport class FieldModel {\r\n    FieldID: string;\r\n    FieldName: string;\r\n    FieldType: string;\r\n    options: string[];\r\n    isFieldChecked: boolean; // Use in Applicant Profile Page\r\n    DependentFieldList: {FieldID, SectionID}[]; // List of Children dependent on this field\r\n    ParentField: {FieldID, SectionID, FieldType, FieldList: any[]}; // Assuming single Parent\r\n    Table: string;  // If Options in the Field is predefined in a Table\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/field.model.ts","export class FormControlModel {\r\n    Type: string;\r\n    isMultipleOption: boolean;\r\n    optionCount: number;\r\n    Table: string;\r\n    Total: number;\r\n    ParentType: string;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/form-control.model.ts","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  UserType:string\r\n\r\n  constructor(private authService:AuthService) { }\r\n\r\n  ngOnInit() {\r\n    this.UserType = this.authService.sessionData.type;\r\n  }\r\n\r\n  OnLogout(){\r\n    this.authService.Logout();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-preview-form',\n  templateUrl: './preview-form.component.html',\n  styleUrls: ['./preview-form.component.css']\n})\nexport class PreviewFormComponent implements OnInit {\n  @Input() SelectedForm;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/preview-form/preview-form.component.ts","import { FieldModel } from './field.model';\r\n\r\nexport class SectionModel {\r\n    SectionID: string;\r\n    SectionName: string;\r\n    CanBeMultiple: boolean;\r\n    Fields: FieldModel[];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/section.model.ts","import { Component, OnInit } from '@angular/core';\nimport { CustomFormService } from '../custom-form.service';\nimport { FormModel } from '../form.model';\nimport { SectionModel } from '../Section.model';\n\n@Component({\n  selector: 'app-view-forms',\n  templateUrl: './view-forms.component.html',\n  styleUrls: ['./view-forms.component.css']\n})\nexport class ViewFormsComponent implements OnInit {\n  FormsList: FormModel[];\n  SelectedForm: FormModel;\n  isSelected: Boolean = false;\n  FormsCount: Number = 0;\n  constructor(private customFormService: CustomFormService) {}\n\n  ngOnInit() {\n    this.getAllForms();\n  }\n\n  OnSelectForm(index) {\n    this.isSelected = true;\n    this.SelectedForm = this.FormsList[index];\n    console.log(this.SelectedForm);\n  }\n\n  OnSaveForm(event) {\n    this.SelectedForm = event;\n    this.isSelected = true;\n    this.getAllForms();\n  }\n\n  CreateNewForm() {\n    this.SelectedForm = new FormModel();\n    this.SelectedForm.Sections = new Array<SectionModel>();\n    this.isSelected = true;\n  }\n\n  getAllForms() {\n    this.customFormService.GetAllForms().subscribe(obj => {\n      if (obj && obj.length) {\n        this.FormsList = obj;\n        this.FormsCount = this.FormsList.length;\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/view-forms/view-forms.component.ts","import { Component, OnInit,Input } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-signin',\r\n  templateUrl: './signin.component.html',\r\n  styleUrls: ['./signin.component.css']\r\n})\r\nexport class SigninComponent implements OnInit {\r\n  @Input() message:string;\r\n  constructor(private router:Router, private authService: AuthService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  OnSignIn(form:NgForm){\r\n    const userid = form.value.userid;\r\n    const password = form.value.password;\r\n    this.authService.Signin(userid, password).subscribe(obj => {\r\n      if(obj.user == false){\r\n          this.message = \"Your username or password is incorrect\";\r\n      }\r\n      else{\r\n        this.authService.sessionData = obj.user;\r\n        this.authService.isAuthenticated.next(true);\r\n        this.router.navigate(['/']);\r\n      }\r\n  }, error => this.router.navigate(['/signin']));;\r\n  }\r\n\r\n  GoToSignup(){\r\n    this.router.navigate(['/signup']);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/signin/signin.component.ts","import { Component, OnInit , Input} from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { concat } from 'rxjs/operator/concat';\r\nimport { Router } from '@angular/router';\r\nimport 'rxjs/rx';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  @Input() otptext:string;\r\n  @Input() phoneno:string;\r\n  @Input() message:string;\r\n  \r\n  ApplicantType: any[];\r\n  isPhoneVerified = false;\r\n  isSMSSent = false;\r\n  constructor(private router: Router, private authService: AuthService) { }\r\n\r\n  ngOnInit() {\r\n    this.authService.getApplicantType().subscribe(obj =>{\r\n      //console.log(obj);\r\n      this.ApplicantType = obj;\r\n    })\r\n  }\r\n\r\n  OnSignUp(form:NgForm){\r\n    const userid = form.value.userid;\r\n    const password = form.value.password;\r\n    const type = form.value.type;\r\n    this.authService.Signup(userid, password, type).subscribe(obj => {\r\n      if(obj.user == false){\r\n        this.message = \"Some Error Occured. Try Again\";\r\n      }\r\n      else{\r\n        this.authService.sessionData = obj.user;\r\n        this.authService.isAuthenticated.next(true);\r\n        this.router.navigate(['/']);\r\n      }\r\n  }, error => this.router.navigate(['/signup']));\r\n  }\r\n\r\n  SendOTP(){\r\n    this.authService.SendOTP(this.phoneno).subscribe(obj =>{\r\n        if(obj.OTPSent){\r\n        this.isSMSSent = true;\r\n        this.message = \"SMS successfully sent.\";\r\n      }\r\n      else{\r\n        this.message = obj.message;\r\n      }\r\n    });\r\n  }\r\n\r\n  VerifyOTP(){\r\n    this.authService.VerifyOTP(this.otptext,this.phoneno).subscribe(obj =>{\r\n      if(obj.OTPVerified){\r\n        this.isPhoneVerified = true;\r\n        this.message = \"Phone No. verified.\";\r\n      }\r\n      else{\r\n        this.message = obj.message;\r\n      }\r\n    });\r\n  }\r\n  OnLoginPage(){\r\n    this.router.navigate(['/signin']);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/signup/signup.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { Http } from '@angular/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { error } from 'util';\r\nimport 'rxjs/rx';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    isAuthenticated = new Subject<boolean>();\r\n    sessionData;\r\n    constructor(private router: Router, private http: Http) { }\r\n\r\n    Signin(userid, password) {\r\n        // console.log(userid,password);\r\n        return this.http.post(`login`, { username: userid, password: password }).map(res => {\r\n            if (res.status === 400) {\r\n                this.router.navigate(['/signin']);\r\n                throw new Error('' + res.status);\r\n            }else {\r\n                this.sessionData = res.json().sessionData;\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    Signup(userid, password, type) {\r\n        return this.http.post(`register`, {userid: userid, password: password, type}).map(res => {\r\n           if (res.status === 400) {\r\n                this.router.navigate(['/signup']);\r\n                throw new Error('' + res.status);\r\n            }else {\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    getApplicantType() {\r\n        return this.http.get('getApplicantType').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('400');\r\n            }else {\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    isSessionOpen() {\r\n        // console.log('isSession Open');\r\n        return this.http.get(`isSessionOpen`).map(res => {\r\n            if (res.status !== 200) {\r\n                throw new Error('Couldn\\'t authenticate. Some Error Occured' + res.status);\r\n            }else {\r\n                const obj = res.json();\r\n                if (obj.isSessionOpen === true) {\r\n                    this.isAuthenticated.next(true);\r\n                    this.sessionData = obj.sessionData;\r\n                    // console.log(this.sessionData);\r\n                    return true;\r\n                }else {\r\n                    this.isAuthenticated.next(false);\r\n                    this.sessionData = null;\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    SendOTP(phoneno) {\r\n        console.log('SendOTP Auth');\r\n       return this.http.post('sendOTP', { phoneno: phoneno}).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Verify. Some Error Occured' + res.status);\r\n            }else {\r\n              return res.json();\r\n            }\r\n          });\r\n        }\r\n\r\n    VerifyOTP(otp, phoneno) {\r\n        console.log('Verify OTP');\r\n        return this.http.post('verifyOTP', {phoneno: phoneno, otp: otp}).map(res => {\r\n             if (res.status === 400) {\r\n                 throw new Error('Couldn\\'t Verify. Some Error Occured' + res.status);\r\n             }else {\r\n               return res.json();\r\n             }\r\n           });\r\n    }\r\n\r\n    Logout() {\r\n        return this.http.get('logout').subscribe(obj => {\r\n            console.log('Logged out successfully');\r\n            this.isAuthenticated.next(false);\r\n            this.router.navigate(['/signin']);\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth.service.ts","import { Http } from '@angular/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { map } from 'rxjs/operators/map';\r\n// import 'rxjs/add/operator/map';\r\nimport { Observable } from 'rxjs/observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { FormModel } from './form.model';\r\n\r\n@Injectable()\r\nexport class CustomFormService {\r\n    constructor(private router: Router, private http: Http) { }\r\n\r\n    GetFormControls() {\r\n        return this.http.get('getformcontrols').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t get form controls');\r\n            }else {\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    SaveForm(form: FormModel) {\r\n        return this.http.post('saveForm', form).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Save Forms');\r\n            }else {\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    GetForm(type) {\r\n        // console.log('Get form');\r\n        return this.http.post('getForm', { type }).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Forms');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetAllForms() {\r\n        // console.log('Get form');\r\n        return this.http.get('getAllForms').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Forms');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    // GetAllApplicants(){\r\n    //     return this.http.get('getAllApplicants').map(res =>{\r\n    //         if(res.status == 400){\r\n    //             throw new Error('Couldn\\'t Get Applicants List');\r\n    //         }\r\n    //         else{\r\n    //             let obj = res.json();\r\n    //             return res.json();\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    GetAllApplicantsPersonalDetails(PersonalDetailsID) {\r\n        console.log(PersonalDetailsID);\r\n        return this.http.post('GetAllApplicantsPersonalDetails', {id: PersonalDetailsID}).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Applicants List');\r\n            }else {\r\n                const obj = res.json();\r\n                return res.json();\r\n            }\r\n        });\r\n    }\r\n\r\n    SaveApplicantForm(ApplicantDetails) {\r\n        return this.http.post('saveApplicantData', ApplicantDetails).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Forms');\r\n            }else {\r\n                const obj = res.json();\r\n                console.log(obj);\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    SaveTemplate(template) {\r\n        return this.http.post('saveTemplate', template).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Save Template');\r\n            }else {\r\n                const obj = res.json();\r\n                console.log(obj);\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetAllTemplates() {\r\n        return this.http.get('getAllTemplates').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Template');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetTemplatesByFormID(formID) {\r\n        console.log(formID);\r\n        return this.http.post('getTemplatesByFormID', {formID}).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Templates');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetApplicantProfile(_id) {\r\n        return this.http.post('getApplicantProfile', { _id }).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Applicant');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    UpdateApplicantProfile(oldobj, newobj) {\r\n        return this.http.post('UpdateApplicantProfile', { oldobj, newobj }).map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Forms');\r\n            }else {\r\n                const obj = res.json();\r\n                console.log(obj);\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    getCountries() {\r\n        return this.http.get('getAllCountries').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Template');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    getCompanyTypes() {\r\n        return this.http.get('getAllCompanyTypes').map(res => {\r\n            if (res.status === 400) {\r\n                throw new Error('Couldn\\'t Get Template');\r\n            }else {\r\n                const obj = res.json();\r\n                if (!_.isEmpty(obj)) {\r\n                    return res.json();\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/custom-form.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 480\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-form/applicant-form.component.css\n// module id = 481\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-list/applicant-list.component.css\n// module id = 482\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-profile/applicant-profile.component.css\n// module id = 483\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/create-form/create-form.component.css\n// module id = 484\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/create-template/create-template.component.css\n// module id = 485\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.css\n// module id = 486\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/preview-form/preview-form.component.css\n// module id = 487\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/view-forms/view-forms.component.css\n// module id = 488\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/signin/signin.component.css\n// module id = 489\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/signup/signup.component.css\n// module id = 490\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\n  <div id=\\\"page-wrapper\\\" style=\\\"margin:100px\\\">\\n      <router-outlet></router-outlet>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 491\n// module chunks = 1","module.exports = \"<!--Empty Form-->\\r\\n<div *ngIf=\\\"!isApplicationFilled\\\">\\r\\n    <form (ngSubmit)=\\\"onSaveForm()\\\" [formGroup]=\\\"ProfileForm\\\">\\r\\n        <h3>{{FormTitle}}</h3>\\r\\n        <div formArrayName=\\\"customcontrols\\\" *ngFor=\\\"let currsection of ProfileForm.get('customcontrols').controls; let currsectionindex = index;\\\">\\r\\n            <h4>{{FormLayout.Sections[currsectionindex][0].SectionName}}</h4>\\r\\n\\r\\n            <div *ngFor=\\\"let subsection of currsection.controls; let subindex = index\\\" [formArrayName]=\\\"currsectionindex\\\">\\r\\n                <hr>\\r\\n                <div *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][subindex].Fields; let fieldindex = index\\\" [formGroupName]=\\\"subindex\\\">\\r\\n                    <div [ngSwitch]=\\\"field.FieldType\\\">\\r\\n                        <label>{{field.FieldName}}</label>\\r\\n\\r\\n                        <!-----------------------For Radio Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Radio'\\\">\\r\\n                            <div *ngFor=\\\"let option of field.options;let optionindex = index\\\">\\r\\n                                {{option}}\\r\\n                                <input class=\\\"form-control\\\" type=\\\"radio\\\" [formControlName]=\\\"fieldindex\\\" [value]=\\\"option\\\">\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <!-----------------------End Radio Button------------------>\\r\\n\\r\\n                        <!-----------------------For Checkbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Checkbox'\\\">\\r\\n                            <div *ngFor=\\\"let option of field.options; let optionindex = index\\\" [formArrayName]=\\\"fieldindex\\\">\\r\\n                                {{option}}\\r\\n                                <input class=\\\"form-control\\\" type=\\\"checkbox\\\" [formControlName]=\\\"optionindex\\\">\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <!-----------------------End Checkbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For Textbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Textbox'\\\" class=\\\"form-group\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                        </div>\\r\\n                        <!----------------------End Textbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For Paragraph Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Textarea'\\\" class=\\\"form-group\\\">\\r\\n                            <textarea class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\"></textarea>\\r\\n                        </div>\\r\\n                        <!----------------------End Paragraph Button------------------>\\r\\n\\r\\n                        <!-----------------------For Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Dropdown'\\\" class=\\\"form-group\\\">\\r\\n                            <select class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Choose one</option>\\r\\n                                <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                            </select>\\r\\n                        </div>\\r\\n                        <!----------------------End Dropbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For Calendar Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Calendar'\\\" class=\\\"form-group\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"date\\\" [formControlName]=\\\"fieldindex\\\" />\\r\\n                        </div>\\r\\n                        <!----------------------End Calendar Button------------------>\\r\\n\\r\\n                        <!-----------------------For Countries Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Country'\\\" class=\\\"form-group\\\">\\r\\n                            <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select Country</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option.CountryName}}>{{option.CountryName}}</option>\\r\\n                            </select>\\r\\n                        </div>\\r\\n                        <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For State Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'State'\\\" class=\\\"form-group\\\">\\r\\n                            <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select State</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option.StateName}}>{{option.StateName}}</option>\\r\\n                            </select>\\r\\n                            <!-- <select>\\r\\n                                    <option selected disabled>Choose one</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                                </select> -->\\r\\n                        </div>\\r\\n                        <!----------------------End State Dropbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For City Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'City'\\\" class=\\\"form-group\\\">\\r\\n                            <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select City</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option}}>{{option}}</option>\\r\\n                            </select>\\r\\n                            <!-- <select>\\r\\n                                        <option selected disabled>Choose one</option>\\r\\n                                        <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                                    </select> -->\\r\\n                        </div>\\r\\n                        <!----------------------End City Dropbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For CustomerType Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Type'\\\" class=\\\"form-group\\\">\\r\\n                            <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select Customer Type</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                            </select>\\r\\n\\r\\n                            <!-- <select [formControlName]=\\\"fieldindex\\\"> \\r\\n                        <option selected disabled>Choose one</option>\\r\\n                        <option *ngFor=\\\"let option of field.options;\\\"value= {{country.id}}>{{country.name}}</option>\\r\\n                    </select>-->\\r\\n                        </div>\\r\\n                        <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                        <!-----------------------For Installation Type Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'InstallationType'\\\" class=\\\"form-group\\\">\\r\\n                            <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select Installation Type</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                            </select>\\r\\n                            <!-- <select>\\r\\n                                <option selected disabled>Choose one</option>\\r\\n                                <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                            </select> -->\\r\\n                        </div>\\r\\n                        <!----------------------End Installation Type Dropbox Button------------------>\\r\\n                        <!-----------------------For Designation Dropbox Button------------------>\\r\\n                        <div *ngSwitchCase=\\\"'Designation'\\\" class=\\\"form-group\\\">\\r\\n                            <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                <option selected disabled>Select Designation</option>\\r\\n                                <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                            </select>\\r\\n                        </div>\\r\\n                        <!----------------------End Designation Dropbox Button------------------>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <span>\\r\\n                <a *ngIf=\\\"FormLayout.Sections[currsectionindex][0].CanBeMultiple\\\" (click)=\\\"AddSubSection(currsectionindex)\\\">Add Section</a>\\r\\n            </span>\\r\\n            <hr>\\r\\n        </div>\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Save</button>\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"isApplicationFilled\\\">\\r\\n    <h3>{{FormTitle}}</h3>\\r\\n    <form (ngSubmit)=\\\"onSaveForm()\\\" [formGroup]=\\\"ProfileForm\\\">\\r\\n        <div formArrayName=\\\"customcontrols\\\" *ngFor=\\\"let currsection of ProfileForm.get('customcontrols').controls; let currsectionindex = index;\\\">\\r\\n            <h4>{{FormLayout.Sections[currsectionindex][0].SectionName}}</h4>\\r\\n\\r\\n            <!-- Sections that cannot be multiple in Non Edit Mode -->\\r\\n            <ng-container *ngIf=\\\"!FormLayout.Sections[currsectionindex][0].CanBeMultiple && !FormLayout.Sections[currsectionindex][0].isEditMode\\\">\\r\\n                <div *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][0].Fields; let fieldindex = index\\\">\\r\\n                    <label>{{field.FieldName}}:</label> {{GetFieldValue(currsectionindex,0,fieldindex)}}\\r\\n                </div>\\r\\n                <span>\\r\\n                    <a (click)=\\\"EditSubSection(currsectionindex, 0)\\\">Edit {{FormLayout.Sections[currsectionindex][0].SectionName}}</a>\\r\\n                </span>\\r\\n            </ng-container>\\r\\n\\r\\n            <!-- Sections that cannot be multiple in Edit Mode -->\\r\\n            <ng-container *ngIf=\\\"!FormLayout.Sections[currsectionindex][0].CanBeMultiple && FormLayout.Sections[currsectionindex][0].isEditMode\\\">\\r\\n                <ng-container *ngFor=\\\"let subsection of currsection.controls; let subindex = index\\\" [formArrayName]=\\\"currsectionindex\\\">\\r\\n                    <ng-container *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][0].Fields; let fieldindex = index\\\" [formGroupName]=\\\"subindex\\\">\\r\\n                        <ng-container [ngSwitch]=\\\"field.FieldType\\\">\\r\\n                            <!-- <label>{{field.FieldName}}</label> -->\\r\\n\\r\\n                            <!-----------------------For Radio Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Radio'\\\">\\r\\n                                <ng-container *ngFor=\\\"let option of field.options;let optionindex = index\\\">\\r\\n                                    {{option}}\\r\\n                                    <input class=\\\"form-control\\\" type=\\\"radio\\\" [formControlName]=\\\"fieldindex\\\" [value]=\\\"option\\\">\\r\\n                                </ng-container>\\r\\n                            </div>\\r\\n\\r\\n                            <!-----------------------End Radio Button------------------>\\r\\n\\r\\n                            <!-----------------------For Checkbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Checkbox'\\\">\\r\\n                                <ng-container *ngFor=\\\"let option of field.options; let optionindex = index\\\" [formArrayName]=\\\"fieldindex\\\">\\r\\n                                    {{option}}\\r\\n                                    <input type=\\\"checkbox\\\" [formControlName]=\\\"optionindex\\\">\\r\\n                                </ng-container>\\r\\n                            </div>\\r\\n\\r\\n                            <!-----------------------End Checkbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Textbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Textbox'\\\" class=\\\"form-group\\\">\\r\\n                                <input class=\\\"form-control\\\" type=\\\"text\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End Textbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Paragraph Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Textarea'\\\" class=\\\"form-group\\\">\\r\\n                                <textarea class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End Paragraph Button------------------>\\r\\n\\r\\n                            <!-----------------------For Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Dropdown'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Choose one</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n\\r\\n                            <!----------------------End Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Calendar Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Calendar'\\\" class=\\\"form-group\\\">\\r\\n                                <input class=\\\"form-control\\\" type=\\\"date\\\" [formControlName]=\\\"fieldindex\\\" />\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End Calendar Button------------------>\\r\\n\\r\\n                            <!-----------------------For Countries Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Country'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Country</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.CountryName}}>{{option.CountryName}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For State Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'State'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select State</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.StateName}}>{{option.StateName}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End State Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For City Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'City'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select City</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option}}>{{option}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End City Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For CustomerType Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Type'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Customer Type</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Installation Type Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'InstallationType'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Installation Type</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End Installation Type Dropbox Button------------------>\\r\\n                            <!-----------------------For Designation Dropbox Button------------------>\\r\\n                            <div *ngSwitchCase=\\\"'Designation'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Designation</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n\\r\\n                            <!----------------------End Designation Dropbox Button------------------>\\r\\n\\r\\n                        </ng-container>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n                <a type=\\\"button\\\" (click)=\\\"onSavesubSection(currsectionindex,0)\\\">Done</a>\\r\\n            </ng-container>\\r\\n\\r\\n            <!-- Sections that can be multiple -->\\r\\n            <span>\\r\\n                <a class=\\\"pull-right\\\" *ngIf=\\\"FormLayout.Sections[currsectionindex][0].CanBeMultiple\\\" (click)=\\\"AddSubSection(currsectionindex)\\\">Add {{FormLayout.Sections[currsectionindex][0].SectionName}}</a>\\r\\n            </span>\\r\\n            <table class=\\\"table table-bordered table-striped\\\" *ngIf=\\\"FormLayout.Sections[currsectionindex][0].CanBeMultiple\\\">\\r\\n                <tr>\\r\\n                    <th *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][0].Fields; let fieldindex = index\\\">\\r\\n                        {{field.FieldName}}\\r\\n                    </th>\\r\\n                    <th></th>\\r\\n                    <th></th>\\r\\n                </tr>\\r\\n                <ng-container *ngFor=\\\"let subsection of currsection.controls; let subindex = index\\\" [formArrayName]=\\\"currsectionindex\\\">\\r\\n                        <!-- If Sub Section/Row is in Non Edit Mode  -->\\r\\n                <tr *ngIf=\\\"!FormLayout.Sections[currsectionindex][subindex].isEditMode\\\">\\r\\n                    <td *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][0].Fields; let fieldindex = index\\\">\\r\\n                        {{GetFieldValue(currsectionindex,subindex,fieldindex)}}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        <a *ngIf=\\\"FormLayout.Sections[currsectionindex].length>1\\\" (click)=\\\"RemoveSubSection(currsectionindex,subindex)\\\">Remove</a>\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        <span>\\r\\n                            <a (click)=\\\"EditSubSection(currsectionindex, subindex)\\\">Edit</a>\\r\\n                        </span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n\\r\\n                <!-- If Sub Section/Row is in Edit Mode  -->\\r\\n\\r\\n                <tr *ngIf=\\\"FormLayout.Sections[currsectionindex][subindex].isEditMode\\\">\\r\\n                    <ng-container *ngFor=\\\"let field of FormLayout.Sections[currsectionindex][subindex].Fields; let fieldindex = index\\\" [formGroupName]=\\\"subindex\\\">\\r\\n                        <ng-container [ngSwitch]=\\\"field.FieldType\\\">\\r\\n                            <!-- <label>{{field.FieldName}}</label> -->\\r\\n\\r\\n                            <!-----------------------For Radio Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Radio'\\\">\\r\\n                                <ng-container *ngFor=\\\"let option of field.options;let optionindex = index\\\">\\r\\n                                    {{option}}\\r\\n                                    <input class=\\\"form-control\\\" type=\\\"radio\\\" [formControlName]=\\\"fieldindex\\\" [value]=\\\"option\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n\\r\\n                            <!-----------------------End Radio Button------------------>\\r\\n\\r\\n                            <!-----------------------For Checkbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Checkbox'\\\">\\r\\n                                <ng-container *ngFor=\\\"let option of field.options; let optionindex = index\\\" [formArrayName]=\\\"fieldindex\\\">\\r\\n                                    {{option}}\\r\\n                                    <input type=\\\"checkbox\\\" [formControlName]=\\\"optionindex\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n\\r\\n                            <!-----------------------End Checkbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Textbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Textbox'\\\" class=\\\"form-group\\\">\\r\\n                                <input class=\\\"form-control\\\" type=\\\"text\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End Textbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Paragraph Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Textarea'\\\" class=\\\"form-group\\\">\\r\\n                                <textarea class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\"></textarea>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End Paragraph Button------------------>\\r\\n\\r\\n                            <!-----------------------For Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Dropdown'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Choose one</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options;\\\">{{option}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n\\r\\n                            <!----------------------End Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Calendar Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Calendar'\\\" class=\\\"form-group\\\">\\r\\n                                <input class=\\\"form-control\\\" type=\\\"date\\\" [formControlName]=\\\"fieldindex\\\" />\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End Calendar Button------------------>\\r\\n\\r\\n                            <!-----------------------For Countries Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Country'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Country</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.CountryName}}>{{option.CountryName}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For State Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'State'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select State</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.StateName}}>{{option.StateName}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End State Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For City Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'City'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select City</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option}}>{{option}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End City Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For CustomerType Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Type'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Customer Type</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End CustomerType Dropbox Button------------------>\\r\\n\\r\\n                            <!-----------------------For Installation Type Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'InstallationType'\\\" class=\\\"form-group\\\">\\r\\n                                <select (change)=\\\"onSelectParent(currsectionindex, subindex, fieldindex, $event.target.value)\\\" class=\\\"form-control input-lg\\\"\\r\\n                                    [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Installation Type</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End Installation Type Dropbox Button------------------>\\r\\n                            <!-----------------------For Designation Dropbox Button------------------>\\r\\n                            <td *ngSwitchCase=\\\"'Designation'\\\" class=\\\"form-group\\\">\\r\\n                                <select class=\\\"form-control input-lg\\\" [formControlName]=\\\"fieldindex\\\">\\r\\n                                    <option selected disabled>Select Designation</option>\\r\\n                                    <option *ngFor=\\\"let option of field.options\\\" value={{option.name}}>{{option.name}}</option>\\r\\n                                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!----------------------End Designation Dropbox Button------------------>\\r\\n\\r\\n                        </ng-container>\\r\\n                    </ng-container>\\r\\n                    <td>\\r\\n                        <a *ngIf=\\\"FormLayout.Sections[currsectionindex].length>1\\\" (click)=\\\"RemoveSubSection(currsectionindex,subindex)\\\">Remove</a>\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        <a type=\\\"button\\\" (click)=\\\"onSavesubSection(currsectionindex,subindex)\\\">Done</a>\\r\\n                    </td>\\r\\n                </tr>\\r\\n\\r\\n                </ng-container>\\r\\n            </table>\\r\\n            \\r\\n            <div *ngFor=\\\"let subsection of currsection.controls; let subindex = index\\\">\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"isFormSaved != 2\\\">Save Changes</button>\\r\\n    </form>\\r\\n    <div class=\\\"panel panel-danger\\\" style=\\\"margin:10px\\\" *ngIf=\\\"isFormSaved == -1\\\">\\r\\n        <div class=\\\"panel-body\\\">Details couldn\\\\'t be saved.</div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"panel panel-success\\\" style=\\\"margin:10px\\\" *ngIf=\\\"isFormSaved == 1\\\">\\r\\n        <div class=\\\"panel-body\\\">Details saved Sucessfully.</div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- Profile Already Filled-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-form/applicant-form.component.html\n// module id = 492\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <h3>\\n    Applicant List\\n  </h3>\\n  <div class=\\\"col-md-2\\\">\\n    <ul>\\n      <li *ngFor=\\\"let item of ApplicantsDetails;let j=index\\\">\\n        <a (click)=\\\"OnSelectApplicantType(j)\\\">{{item.type}}</a>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <div class=\\\"col-md-10\\\" *ngIf=\\\"SelectedType.count_applicants > 0\\\"><!---->\\n    <!-- <select [(ngModel)]=\\\"FilterType\\\">\\n      <option selected disabled>Choose one</option>\\n      <option *ngFor=\\\"let col of SelectedType.fields\\\">{{col.FieldName}}</option>\\n    </select> -->\\n\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"FilterText\\\">\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"OnSearch()\\\">Search</button>\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"OnClearSearch()\\\">Clear Search</button>\\n    <!-- <button class=\\\"btn btn-success\\\" (click)=\\\"ExportSelectedProfiles()\\\">Export to pdf</button> -->\\n    <!---When Filter Text is not empty show filtered results-->\\n    <table class=\\\"table table-striped table-bordered\\\">\\n      <tr>\\n        <th></th>\\n        <th *ngFor=\\\"let col of SelectedType.fields\\\">\\n          {{col.FieldName}}\\n        </th>\\n        <th></th>\\n      </tr>\\n      <ng-container *ngFor=\\\"let applicant of SelectedType.applicants;let j=index\\\">\\n          <tr *ngIf=\\\"isApplicantFiltered[j]\\\">\\n              <input type=\\\"checkbox\\\" [checked]=\\\"isApplicantChecked[j]\\\" (change)=\\\"ToggleApplicantSelection(j)\\\">\\n              <td *ngFor=\\\"let col of SelectedType.fields\\\">\\n                {{applicant[col.FieldName]}}\\n              </td>\\n              <td><a [routerLink]=\\\"['../ViewProfile',applicant.applicantID]\\\">View Profile</a></td>\\n            </tr>\\n        <!-- <tr *ngIf=\\\"isApplicantFiltered[j]\\\">\\n          <input type=\\\"checkbox\\\" [checked]=\\\"isApplicantChecked[j]\\\" (change)=\\\"ToggleApplicantSelection(j)\\\">\\n          <td *ngFor=\\\"let col of SelectedType.fields | filterBy:userFilter\\\">\\n            {{applicant[\\\"Personal Details\\\"][0][col.FieldName]}}\\n          </td>\\n        </tr> -->\\n\\n        <!--PDF template-->\\n        <div [hidden]=true #ApplicantProfiles>\\n          <ul>\\n            <li *ngFor=\\\"let col of SelectedType.fields\\\">\\n              <label>{{col.FieldName}}:</label>{{applicant[col.FieldName]}}\\n            </li>\\n          </ul>\\n        </div>\\n      </ng-container>\\n    </table>\\n    <br>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-list/applicant-list.component.html\n// module id = 493\n// module chunks = 1","module.exports = \"<h3>{{Form.FormTitle}}</h3>\\n\\n<select (change)=\\\"OnSelectTemplate($event)\\\">\\n  <option selected disabled>Select Template</option>\\n  <option *ngFor=\\\"let col of TemplateList;let j=index\\\">{{col.TemplateTitle}}</option>\\n</select>\\n\\n<div #ApplicantProfile>\\n  <div *ngFor=\\\"let section of Form.Sections;let secindex = index\\\">\\n    <h4>{{section.SectionName}}</h4>\\n\\n    <!-- Sections that cannot be multiple in Non Edit Mode -->\\n    <ng-container *ngIf=\\\"!section.CanBeMultiple\\\">\\n      <div *ngFor=\\\"let field of section.Fields; let fieldindex = index\\\">\\n        <ng-container *ngIf=\\\"field.isFieldChecked\\\">\\n            <label> {{field.FieldName}}:</label> {{GetFieldValue(section.SectionID, 0, field.FieldID)}}\\n        </ng-container>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"section.CanBeMultiple\\\">\\n      <table class=\\\"table table-striped table-bordered\\\">\\n        <tr>\\n          <ng-container *ngFor=\\\"let field of section.Fields; let fieldindex = index\\\">\\n            <th *ngIf=\\\"field.isFieldChecked\\\">\\n              {{field.FieldName}}\\n            </th>\\n          </ng-container>\\n        </tr>\\n        <tr *ngFor=\\\"let subsection of Applicant[section.SectionID]; let subindex = index\\\">\\n          <ng-container *ngFor=\\\"let field of section.Fields; let fieldindex = index\\\">\\n            <td *ngIf=\\\"field.isFieldChecked\\\">\\n              {{GetFieldValue(section.SectionID, subindex, field.FieldID)}}\\n            </td>\\n          </ng-container>\\n        </tr>\\n      </table>\\n    </ng-container>\\n    <hr>\\n  </div>\\n\\n  <!-- <div *ngFor=\\\"let section of Form.Sections;let secindex = index\\\">\\n    <ng-container *ngIf=\\\"CheckedFieldCount(secindex) > 0\\\">\\n      <h4>{{section.SectionName}}</h4>\\n      <table class=\\\"table table-striped table-bordered\\\">\\n\\n        <tr>\\n          <ng-container *ngFor=\\\"let field of section.Fields;let findex = index\\\">\\n            <th *ngIf=\\\"field.isFieldChecked\\\">\\n              {{field.FieldName}}\\n            </th>\\n          </ng-container>\\n        </tr>\\n\\n        <tr *ngFor=\\\"let item of GetSectionCount(section.SectionID)|times; let count = index\\\">\\n          <ng-container *ngFor=\\\"let field of section.Fields;let findex = index\\\">\\n            <td *ngIf=\\\"field.isFieldChecked\\\">\\n              {{GetFieldValue(section.SectionID,count, field.FieldID)}}\\n            </td>\\n          </ng-container>\\n        </tr>\\n\\n      </table>\\n      <br>\\n    </ng-container>\\n\\n  </div> -->\\n</div>\\n<button class=\\\"btn btn-primary\\\" (click)=\\\"PrintToPdf()\\\">Print</button>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/applicant-profile/applicant-profile.component.html\n// module id = 494\n// module chunks = 1","module.exports = \"<label>\\n  Form Title :\\n</label>\\n<input [(ngModel)]=\\\"SelectedForm.FormTitle\\\">\\n<br>\\n<label>\\n  Form Type :\\n</label>\\n<select id=\\\"type\\\" name=\\\"type\\\" [(ngModel)]=\\\"SelectedForm.FormType\\\" (change)=\\\"OnSelectFormType($event)\\\" required>\\n  <option *ngFor=\\\"let option of ApplicantType\\\" [ngValue]=\\\"option._id\\\" >{{option.type}}</option>\\n</select>\\n<br>\\n<div class=\\\"alert alert-danger\\\" *ngIf=\\\"Error\\\">\\n    <a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"close\\\">&times;</a>\\n    {{Error}}\\n</div>\\n\\n<br>\\n<div *ngFor=\\\"let section of SelectedForm.Sections; let sectionindex = index\\\">\\n    <label>Section Title</label>\\n    <input [(ngModel)]=\\\"section.SectionName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    <div *ngFor=\\\"let item of section.Fields; let fieldindex = index;\\\">\\n        <div [ngSwitch]=\\\"item.FieldType\\\">\\n          <label>{{item.FieldType}}</label>\\n          <!-----------------------For Radio Button------------------>\\n          <div *ngSwitchCase=\\\"'Radio'\\\" class=\\\"form-group\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <ul>\\n              <li *ngFor=\\\"let option of item.options; let optionindex = index\\\">\\n                <input [value]=\\\"option\\\" (change)=\\\"OnOptionChange(sectionindex,fieldindex,$event.target.value,optionindex)\\\">\\n                <a (click)=\\\"RemoveOption(sectionindex,fieldindex,optionindex)\\\">X</a>\\n              </li>\\n            </ul>\\n            <a (click)=\\\"AddOption(sectionindex,fieldindex)\\\">Add Options</a>\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!-----------------------End Radio Button------------------>\\n    \\n          <!-----------------------For Checkbox Button------------------>\\n          <div *ngSwitchCase=\\\"'Checkbox'\\\" class=\\\"form-group\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <ul>\\n              <li *ngFor=\\\"let option of item.options; let optionindex = index\\\">\\n                <input [value]=\\\"option\\\" (change)=\\\"OnOptionChange(sectionindex,fieldindex,$event.target.value,optionindex)\\\">\\n                <a (click)=\\\"RemoveOption(sectionindex, fieldindex,optionindex)\\\">X</a>\\n              </li>\\n            </ul>\\n            <a (click)=\\\"AddOption(sectionindex,fieldindex)\\\">Add Options</a>\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!-----------------------End Checkbox Button------------------>\\n    \\n          <!-----------------------For Dropbox Button------------------>\\n          <div *ngSwitchCase=\\\"'Dropdown'\\\" class=\\\"dropdown\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <ul>\\n              <li *ngFor=\\\"let option of item.options; let optionindex = index\\\">\\n                <input [value]=\\\"option\\\" (change)=\\\"OnOptionChange(sectionindex,fieldindex,$event.target.value,optionindex)\\\">\\n                <a (click)=\\\"RemoveOption(sectionindex,fieldindex,optionindex)\\\">X</a>\\n              </li>\\n            </ul>\\n            <a (click)=\\\"AddOption(sectionindex,fieldindex)\\\">Add Options</a>\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!----------------------End Dropbox Button------------------>\\n    \\n          <!-----------------------For Textbox Button------------------>\\n          <div *ngSwitchCase=\\\"'Textbox'\\\" class=\\\"form-group\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n    \\n          <!----------------------End Textbox Button------------------>\\n    \\n          <!-----------------------For TextArea Button------------------>\\n          <div *ngSwitchCase=\\\"'Textarea'\\\" class=\\\"form-group\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [value]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!----------------------End TextArea Button------------------>\\n\\n          <!-----------------------For Calendar Button------------------>\\n          <div *ngSwitchCase=\\\"'Calendar'\\\" class=\\\"form-group\\\">\\n              <input [(ngModel)]=\\\"item.FieldName\\\" [value]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n              <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n            </div>\\n            <!----------------------End Calendar Button------------------>\\n\\n          <!-----------------------For Country List------------------>\\n          <div *ngSwitchCase=\\\"'Country'\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n            <br>\\n            *Take options from {{item.Table}} Library.\\n          </div>\\n          <!----------------------End Country List------------------>\\n\\n          <!-----------------------For State List------------------>\\n          <div *ngSwitchCase=\\\"'State'\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <!-- <ul>\\n              <li *ngFor=\\\"let x of item.ParentField.FieldList ;let k=index;\\\">\\n                {{x.FieldName}}\\n              </li>\\n            </ul> -->\\n            <select (change)=\\\"AddParentField(sectionindex,fieldindex,$event.target.value)\\\">\\n              <option selected disabled>Choose one</option>\\n            <option *ngFor=\\\"let x of item.ParentField.FieldList;\\\" [value]=\\\"x|json\\\">{{GetFieldName(x.SectionID,x.FieldID)}}</option>\\n          </select>\\n          <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!----------------------End State List------------------>\\n\\n          <!-----------------------For city List------------------>\\n          <div *ngSwitchCase=\\\"'City'\\\">\\n              <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n              <!-- <ul>\\n                <li *ngFor=\\\"let x of item.ParentField.FieldList ;let k=index;\\\">\\n                  {{x.FieldName}}\\n                </li>\\n              </ul> -->\\n              <select (change)=\\\"AddParentField(sectionindex,fieldindex,$event.target.value)\\\">\\n                <option selected disabled>Choose one</option>\\n              <option *ngFor=\\\"let x of item.ParentField.FieldList\\\" [value]=\\\"x|json\\\">{{GetFieldName(x.SectionID,x.FieldID)}}</option>\\n            </select>\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n            </div>\\n            <!----------------------End city List------------------>\\n\\n           <!-----------------------For CompanyType List------------------>\\n           <div *ngSwitchCase=\\\"'Type'\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n            <br>*Take options from {{item.Table}} Library.\\n          </div>\\n          <!----------------------End CompanyType List------------------>\\n\\n          <!-----------------------For Installation Type List------------------>\\n          <div *ngSwitchCase=\\\"'InstallationType'\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <!-- <ul>\\n              <li *ngFor=\\\"let x of item.ParentField.FieldList ;let k=index;\\\">\\n                {{x.FieldName}}\\n              </li>\\n            </ul> -->\\n            <select (change)=\\\"AddParentField(sectionindex,fieldindex,$event.target.value)\\\">\\n              <option selected disabled>Choose one</option>\\n            <option *ngFor=\\\"let x of item.ParentField.FieldList\\\" [value]=\\\"x|json\\\">{{GetFieldName(x.SectionID,x.FieldID)}}</option>\\n          </select>\\n          <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!----------------------End Installation Type List------------------>\\n\\n          <!-----------------------For Designation List------------------>\\n          <div *ngSwitchCase=\\\"'Designation'\\\">\\n            <input [(ngModel)]=\\\"item.FieldName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\n            <!-- <ul>\\n              <li *ngFor=\\\"let x of item.ParentField.FieldList ;let k=index;\\\">\\n                {{x.FieldName}}\\n              </li>\\n            </ul> -->\\n            <select (change)=\\\"AddParentField(sectionindex,fieldindex,$event.target.value)\\\">\\n              <option selected disabled>Choose one</option>\\n            <option *ngFor=\\\"let x of item.ParentField.FieldList\\\" [value]=\\\"x|json\\\">{{GetFieldName(x.SectionID,x.FieldID)}}</option>\\n          </select>\\n          <a (click)=\\\"RemoveField(sectionindex,fieldindex)\\\">Remove Field</a>\\n          </div>\\n          <!----------------------End Designation List------------------>\\n        </div>\\n      </div>\\n      <br>\\n      <table class=\\\"table-bordered table-condensed table-striped\\\">\\n        <tr>\\n          <td colspan=\\\"2\\\">\\n            Field Manager\\n        </td></tr>\\n          <tr>\\n            <td>Control Type</td>\\n            <!-- <td>Option Count</td> -->\\n            <td></td>\\n          </tr>\\n          <tr *ngFor=\\\"let control of controls\\\">\\n            <td>{{control.Type}}</td>\\n            <!-- <td *ngIf=\\\"!control.isMultipleOption\\\"></td>\\n            <td *ngIf=\\\"control.isMultipleOption\\\">\\n              <input type=\\\"text\\\" [(ngModel)]=\\\"control.optionCount\\\">\\n            </td> -->\\n            <td>\\n              <a (click)=\\\"AddField(sectionindex,control)\\\">Add</a>\\n            </td>\\n          </tr>\\n        </table>\\n        <a (click)=\\\"RemoveSection(sectionindex)\\\">Remove Section</a>\\n        <br>\\n        <input type=\\\"checkbox\\\" [(ngModel)]=\\\"section.CanBeMultiple\\\">Can be added Multiple Times.\\n        <hr>\\n</div>\\n<a (click)=\\\"AddSection()\\\">Add Section</a>\\n<button class=\\\"btn btn-primary pull-right\\\" *ngIf=\\\"TotalSections>0\\\" (click)=\\\"OnSave()\\\" type=\\\"submit\\\">Save</button>\\n<br>\\n\\n<div class=\\\"panel panel-danger\\\" style=\\\"margin:10px\\\" *ngIf=\\\"FormSuccessMessage == -1\\\">\\n    <div class=\\\"panel-body\\\">Form couldn\\\\'t be saved.</div>\\n</div>\\n\\n<div class=\\\"panel panel-success\\\"  style=\\\"margin:10px\\\"  *ngIf=\\\"FormSuccessMessage == 1\\\">\\n    <div class=\\\"panel-body\\\">Form saved Sucessfully.</div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/create-form/create-form.component.html\n// module id = 495\n// module chunks = 1","module.exports = \"<div class=\\\"col-md-2\\\">\\n  <ul>\\n    <li *ngFor=\\\"let item of TemplatesList;let j=index\\\">\\n      <a (click)=\\\"OnEditTemplate(j)\\\">{{item.TemplateTitle}}</a>\\n    </li>\\n  </ul>\\n  <a (click)=\\\"OnCreateTemplate()\\\">+ New Template</a>\\n</div>\\n\\n<div class=\\\"col-md-6\\\" *ngIf=\\\"createMode\\\">\\n  <select id=\\\"type\\\" name=\\\"type\\\" (change)=\\\"OnSelectForm($event)\\\">\\n    <option selected disabled>Select Form</option>\\n    <option *ngFor=\\\"let option of FormsList;let j=index\\\">\\n      {{option.FormTitle}}\\n    </option>\\n  </select>\\n  <label>\\n    Template Title:\\n  </label>\\n  <input type=\\\"text\\\" [(ngModel)]=\\\"TemplateTitle\\\">\\n  <div *ngFor=\\\"let section of SelectedForm.Sections; let secindex= index\\\">\\n    {{section.SectionName}}\\n    <br>\\n    <ng-container *ngFor=\\\"let field of section.Fields;let fieldindex=index\\\">\\n      <input type=\\\"checkbox\\\" [checked]=\\\"field.isFieldChecked\\\" (change)=\\\"ToggleFieldSelection(secindex,fieldindex)\\\">\\n      <label>{{field.FieldName}}</label>\\n      <br>\\n    </ng-container>\\n    <hr>\\n  </div>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"OnSaveTemplate()\\\" *ngIf=\\\"TotalFieldsChecked>0\\\">Save Template</button>\\n  <br>\\n  <div class=\\\"panel panel-danger\\\" style=\\\"margin:10px\\\" *ngIf=\\\"TemplateSaved == -1\\\">\\n    <div class=\\\"panel-body\\\">Template couldn\\\\'t be saved.</div>\\n  </div>\\n\\n  <div class=\\\"panel panel-success\\\" style=\\\"margin:10px\\\" *ngIf=\\\"TemplateSaved == 1\\\">\\n    <div class=\\\"panel-body\\\">Template saved Sucessfully.</div>\\n  </div>\\n</div>\\n\\n<div class=\\\"col-md-4\\\" *ngIf=\\\"createMode\\\">\\n  <h3>{{TemplateTitle}}</h3>\\n  <div *ngFor=\\\"let section of SelectedForm.Sections;let secindex= index\\\">\\n    <ng-container *ngIf=\\\"CheckedFieldCount(secindex) > 0\\\">\\n      <h4>\\n        {{section.SectionName}}\\n      </h4>\\n      <br>\\n    </ng-container>\\n    <ng-container *ngFor=\\\"let field of section.Fields;let fieldindex=index\\\">\\n      <label *ngIf=\\\"field.isFieldChecked\\\">{{field.FieldName}}</label>\\n      <br>\\n    </ng-container>\\n    <hr>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/create-template/create-template.component.html\n// module id = 496\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n    <nav class=\\\"navbar navbar-default navbar-fixed-top\\\" role=\\\"navigation\\\" style=\\\"margin-bottom: 0\\\">\\r\\n        <div class=\\\"navbar-header\\\">\\r\\n        </div>\\r\\n        <ul class=\\\"nav navbar-nav navbar-right\\\">\\r\\n            <!-- <li routerLinkActive=\\\"active\\\" *ngIf=\\\"UserType == 'Admin'\\\">\\r\\n                    <a [routerLink]=\\\"['createform']\\\">Create Form</a>\\r\\n                </li> -->\\r\\n            <li routerLinkActive=\\\"active\\\" *ngIf=\\\"UserType == 'Admin'\\\">\\r\\n                <a [routerLink]=\\\"['forms']\\\">View Form</a>\\r\\n            </li>\\r\\n            <li routerLinkActive=\\\"active\\\" *ngIf=\\\"UserType == 'Admin'\\\">\\r\\n                <a [routerLink]=\\\"['applicants']\\\">Applicants</a>\\r\\n            </li>\\r\\n            <li routerLinkActive=\\\"active\\\" *ngIf=\\\"UserType == 'Admin'\\\">\\r\\n                <a [routerLink]=\\\"['templates']\\\">Templates</a>\\r\\n            </li>\\r\\n            <li routerLinkActive=\\\"active\\\" *ngIf=\\\"UserType != 'Admin'\\\">\\r\\n                <a [routerLink]=\\\"['profile']\\\">Profile</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a style=\\\"cursor: pointer\\\" (click)=\\\"OnLogout()\\\">Logout</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </nav>\\r\\n    <div id=\\\"page-wrapper\\\" style=\\\"margin:100px\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 497\n// module chunks = 1","module.exports = \"    <h3>{{SelectedForm.FormTitle}}</h3>\\n    <div *ngFor=\\\"let section of SelectedForm.Sections;\\\">\\n       <h4>{{section.SectionName}}</h4> \\n            <div *ngFor=\\\"let item of section.Fields;\\\">\\n                    <div [ngSwitch]=\\\"item.FieldType\\\">\\n                        <label>\\n                            {{item.FieldName}}\\n                        </label>\\n                       <!-----------------------For Radio Button------------------>\\n                       <div *ngSwitchCase=\\\"'Radio'\\\" class=\\\"form-group\\\">\\n                         <div *ngFor=\\\"let option of item.options; let j = index\\\" >\\n                             <!-- <label class=\\\"radio-inline\\\">{{option}}</label> -->\\n                             {{option}}\\n                             <input type=\\\"radio\\\" [value]=\\\"option\\\">\\n                            </div>\\n                       </div>\\n                       <!-----------------------End Radio Button------------------>\\n                 \\n                       <!-----------------------For Checkbox Button------------------>\\n                       <div *ngSwitchCase=\\\"'Checkbox'\\\">\\n                           <div *ngFor=\\\"let option of item.options; let j = index\\\">\\n                             {{option}}\\n                               <input type=\\\"checkbox\\\">\\n                           </div>\\n                       </div>\\n                       <!-----------------------End Checkbox Button------------------>\\n                 \\n                       <!-----------------------For Textbox Button------------------>\\n                       <div *ngSwitchCase=\\\"'Textbox'\\\" class=\\\"form-group\\\">\\n                           <input type=\\\"text\\\"/>\\n                       </div>\\n                       <!----------------------End Textbox Button------------------>\\n                 \\n                       <!-----------------------For Paragraph Button------------------>\\n                       <div *ngSwitchCase=\\\"'Textarea'\\\" class=\\\"form-group\\\">\\n                           <textarea></textarea>\\n                       </div>\\n                       <!----------------------End Paragraph Button------------------>\\n                 \\n                       <!-----------------------For Dropbox Button------------------>\\n                       <div *ngSwitchCase=\\\"'Dropdown'\\\" class=\\\"form-group\\\">\\n                           <select>\\n                               <option selected disabled>Choose one</option>\\n                             <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option>\\n                           </select>\\n                       </div>\\n                        <!----------------------End Dropbox Button------------------>\\n\\n                        <!-----------------------For Calendar Button------------------>\\n                       <div *ngSwitchCase=\\\"'Calendar'\\\" class=\\\"form-group\\\">\\n                            <input type=\\\"date\\\"/>\\n                        </div>\\n                         <!----------------------End Calendar Button------------------>\\n\\n                         <!-----------------------For Country Dropbox Button------------------>\\n                       <div *ngSwitchCase=\\\"'Country'\\\" class=\\\"form-group\\\">\\n                        <select>\\n                            <option selected disabled>Choose one</option>\\n                            Countries\\n                          <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                        </select>\\n                    </div>\\n                     <!----------------------End Country Dropbox Button------------------>\\n\\n                     <!-----------------------For State Dropbox Button------------------>\\n                     <div *ngSwitchCase=\\\"'State'\\\" class=\\\"form-group\\\">\\n                            <select>\\n                                <option selected disabled>Choose one</option>\\n                                States in selected country\\n                              <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                            </select>\\n                        </div>\\n                         <!----------------------End State Dropbox Button------------------>\\n\\n                         <!-----------------------For City Dropbox Button------------------>\\n                     <div *ngSwitchCase=\\\"'City'\\\" class=\\\"form-group\\\">\\n                            <select>\\n                                <option selected disabled>Choose one</option>\\n                                City in selected country\\n                              <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                            </select>\\n                        </div>\\n                         <!----------------------End City Dropbox Button------------------>\\n\\n                         <!-----------------------For CustomerType Dropbox Button------------------>\\n                       <div *ngSwitchCase=\\\"'Type'\\\" class=\\\"form-group\\\">\\n                            <select>\\n                                <option selected disabled>Choose one</option>\\n                            Customer Type\\n                              <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                            </select>\\n                        </div>\\n                         <!----------------------End CustomerType Dropbox Button------------------>\\n    \\n                         <!-----------------------For Installation Type Dropbox Button------------------>\\n                         <div *ngSwitchCase=\\\"'InstallationType'\\\" class=\\\"form-group\\\">\\n                                <select>\\n                                    <option selected disabled>Choose one</option>\\n                                    Installation Types in the selected Customer Type\\n                                  <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                                </select>\\n                            </div>\\n                             <!----------------------End Installation Type Dropbox Button------------------>\\n                              <!-----------------------For Designation Dropbox Button------------------>\\n                         <div *ngSwitchCase=\\\"'Designation'\\\" class=\\\"form-group\\\">\\n                                <select>\\n                                    <option selected disabled>Choose one</option>\\n                                    Designation in the selected Installation Type\\n                                  <!-- <option *ngFor=\\\"let option of item.options;let j=index\\\">{{option}}</option> -->\\n                                </select>\\n                            </div>\\n                             <!----------------------End Designation Dropbox Button------------------>\\n                     </div>\\n                   </div><hr>\\n    </div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/preview-form/preview-form.component.html\n// module id = 498\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-xs-2\\\">\\n      <ul>\\n        Forms List\\n        <li *ngFor=\\\"let option of FormsList; let j=index\\\"><a (click) =\\\"OnSelectForm(j)\\\">{{option.FormTitle}}</a></li>\\n      </ul>\\n      <a (click)=\\\"CreateNewForm()\\\">+ New Form</a>\\n    </div>\\n\\n    <div class=\\\"col-xs-6\\\" *ngIf=\\\"isSelected\\\" >\\n        <app-create-form [SelectedForm]=\\\"SelectedForm\\\"  (FormSaved)=\\\"OnSaveForm($event)\\\"></app-create-form>\\n    </div>\\n    \\n    <div class=\\\"col-xs-4\\\" *ngIf=\\\"isSelected\\\" >\\n            <app-preview-form [SelectedForm]=\\\"SelectedForm\\\"></app-preview-form>\\n        </div>\\n     \\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/view-forms/view-forms.component.html\n// module id = 499\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2\\\">\\r\\n      <span class=\\\"help-block\\\" >{{message}}</span>\\r\\n      <form (ngSubmit)=\\\"OnSignIn(f)\\\" #f=\\\"ngForm\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"userid\\\">Phone No.</label>\\r\\n            <input type=\\\"userid\\\" \\r\\n                     id=\\\"userid\\\" \\r\\n                     class=\\\"form-control\\\" \\r\\n                     ngModel \\r\\n                     name=\\\"userid\\\"\\r\\n                     required\\r\\n                     #userid = \\\"ngModel\\\"> <!-- Just like ngForm ngModel also gives information about control-->\\r\\n            <span class=\\\"help-block\\\" *ngIf=\\\"!userid.valid && userid.touched\\\">Phone No. is invalid</span>\\r\\n           \\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\" ngModel required #password = \\\"ngModel\\\">\\r\\n            <span class=\\\"help-block\\\" *ngIf=\\\"!password.valid && password.touched\\\" >Password is required</span>\\r\\n  </div>\\r\\n  <button class=\\\"btn btn-primary\\\" [disabled]=\\\"!f.valid && f.touched\\\" type=\\\"submit\\\">Sign In</button>\\r\\n  <button class=\\\"btn btn-default\\\" (click) = \\\"GoToSignup()\\\" type=\\\"button\\\">New User? Sign up</button>\\r\\n  </form>\\r\\n  </div>\\r\\n</div>\\r\\n<!--Email Pattern check pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\\\"-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/signin/signin.component.html\n// module id = 500\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2\\\">\\r\\n      <span class=\\\"help-block\\\" >{{message}}</span>\\r\\n        <form (ngSubmit)=\\\"OnSignUp(f)\\\" #f=\\\"ngForm\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"userid\\\">Phone No</label>\\r\\n              <input type=\\\"userid\\\" \\r\\n                       id=\\\"userid\\\" \\r\\n                       class=\\\"form-control\\\" \\r\\n                       name=\\\"userid\\\"\\r\\n                       required\\r\\n                       [(ngModel)]=\\\"phoneno\\\"\\r\\n                       #userid = \\\"ngModel\\\"> <!-- Just like ngForm ngModel also gives information about control-->\\r\\n              <span class=\\\"help-block\\\" *ngIf=\\\"!userid.valid && userid.touched\\\">Phone No. is invalid</span>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\" *ngIf=\\\"isSMSSent\\\">\\r\\n                <label for=\\\"otp\\\">OTP</label>\\r\\n                  <input type=\\\"text\\\" \\r\\n                           id=\\\"otp\\\" \\r\\n                           class=\\\"form-control\\\" \\r\\n                           name=\\\"otp\\\"\\r\\n                           required\\r\\n                           [(ngModel)]=\\\"otptext\\\"\\r\\n                           #otp = \\\"ngModel\\\"> <!-- Just like ngForm ngModel also gives information about control-->\\r\\n                  <span class=\\\"help-block\\\" *ngIf=\\\"!otp.valid && otp.touched\\\">OTP is invalid</span>\\r\\n                </div>\\r\\n            \\r\\n\\r\\n              <button class=\\\"btn btn-warning\\\" *ngIf=\\\"!isSMSSent\\\" (click)=\\\"SendOTP()\\\" type='button'>Continue</button>\\r\\n              <button class=\\\"btn btn-warning\\\" *ngIf=\\\"isSMSSent && !isPhoneVerified\\\" (click)=\\\"VerifyOTP()\\\" type='button'>Verify OTP</button>\\r\\n            \\r\\n            <div class=\\\"form-group\\\" *ngIf=\\\"isPhoneVerified\\\">\\r\\n              <label for=\\\"type\\\">Type\\r\\n                <select id=\\\"type\\\" name=\\\"type\\\" ngModel required>\\r\\n                    <option selected disabled>Choose one</option>\\r\\n                    <option *ngFor=\\\"let option of ApplicantType;let j=index\\\" [ngValue]=\\\"option._id\\\">{{option.type}}</option>\\r\\n                </select></label>\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"password\\\" minlength=\\\"6\\\" id=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\" ngModel required #password = \\\"ngModel\\\">\\r\\n              <span class=\\\"help-block\\\" *ngIf=\\\"!password.valid && password.touched\\\" >Password is invalid</span>\\r\\n              <span class=\\\"help-block\\\" *ngIf=\\\"password.errors?.minlength && password.touched\\\">Password must be atleast 6 characters long</span>\\r\\n            </div>\\r\\n            <button class=\\\"btn btn-primary\\\" *ngIf=\\\"isPhoneVerified\\\" [disabled]=\\\"!f.valid && f.touched\\\" type=\\\"submit\\\">Sign Up</button>\\r\\n            <button class=\\\"btn btn-default\\\" (click)=\\\"OnLoginPage()\\\" type='button'>Already have an account? Log in</button>\\r\\n          </form>\\r\\n    </div>\\r\\n</div>\\r\\n  <!-- pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\\\" -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/signup/signup.component.html\n// module id = 501\n// module chunks = 1","import { SectionModel } from './Section.model';\r\n\r\nexport class FormModel {\r\n    _id: string;\r\n    FormType: string;\r\n    FormTypeName: string;\r\n    FormTitle: string;\r\n    Sections: SectionModel[];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/form.model.ts"],"sourceRoot":""}